
Lcd_Keypad_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800080  00800080  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f1  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091d  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000999  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  000029bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057f  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000789  00000000  00000000  000031fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  8a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_kick>:
	//make LCD in read mode RS = 0, RW = 1
	Clear_bit(lcd_ctrl_port, RS);	
	Set_bit(lcd_ctrl_port, RW);	
	lcd_kick();
	//make data lines as output
	lcd_data_dir |= (0xFF<<Data_shift);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_kick+0x10>
  a2:	00 00       	nop
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <lcd_write_char>:
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_write_char+0x8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_write_char+0xe>
  ba:	00 00       	nop
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	88 bb       	out	0x18, r24	; 24
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	2b b3       	in	r18, 0x1b	; 27
  e6:	30 e1       	ldi	r19, 0x10	; 16
  e8:	c3 9f       	mul	r28, r19
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	92 2f       	mov	r25, r18
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	89 2b       	or	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_write_command>:
}

void lcd_write_command(unsigned char command)
{
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	83 ec       	ldi	r24, 0xC3	; 195
 104:	99 e0       	ldi	r25, 0x09	; 9
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_write_command+0x8>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_write_command+0xe>
 10c:	00 00       	nop
	
	#ifdef FOUR_BIT_MODE
	//lcd_is_busy();
	_delay_ms(10);
	//send last four bits of command
	clear_RS;
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	88 bb       	out	0x18, r24	; 24
	clear_RW;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	88 bb       	out	0x18, r24	; 24
	lcd_data_port = ((lcd_data_port & 0x0F) | (command & 0xF0));
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	9c 2f       	mov	r25, r28
 120:	90 7f       	andi	r25, 0xF0	; 240
 122:	89 2b       	or	r24, r25
 124:	8b bb       	out	0x1b, r24	; 27
	lcd_kick();
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
	//send first four bits of command
	clear_RS;
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	88 bb       	out	0x18, r24	; 24
	clear_RW;
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	88 bb       	out	0x18, r24	; 24
	lcd_data_port = ((lcd_data_port & 0x0F) | (command << 4));
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	30 e1       	ldi	r19, 0x10	; 16
 13a:	c3 9f       	mul	r28, r19
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	92 2f       	mov	r25, r18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	8b bb       	out	0x1b, r24	; 27
	lcd_kick();
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
	#endif
}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcd_goto_xy>:


void lcd_goto_xy(int line, int position)
{
	if(line == 1)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	49 f4       	brne	.+18     	; 0x168 <lcd_goto_xy+0x18>
	{
		if(position >= 0 && position < 16)
 156:	86 2f       	mov	r24, r22
 158:	97 2f       	mov	r25, r23
 15a:	40 97       	sbiw	r24, 0x10	; 16
 15c:	78 f4       	brcc	.+30     	; 0x17c <lcd_goto_xy+0x2c>
		{
			lcd_write_command(cursor_first_line + position);
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	86 0f       	add	r24, r22
 162:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 166:	08 95       	ret
		}
	}
	
	else if (line == 2)
 168:	02 97       	sbiw	r24, 0x02	; 2
 16a:	41 f4       	brne	.+16     	; 0x17c <lcd_goto_xy+0x2c>
	{
		if(position >= 0 && position < 16)
 16c:	86 2f       	mov	r24, r22
 16e:	97 2f       	mov	r25, r23
 170:	40 97       	sbiw	r24, 0x10	; 16
 172:	20 f4       	brcc	.+8      	; 0x17c <lcd_goto_xy+0x2c>
		{
			lcd_write_command(cursor_second_line + position);
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	86 0f       	add	r24, r22
 178:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 17c:	08 95       	ret

0000017e <lcd_write_string>:
	lcd_kick();
	#endif
}

void lcd_write_string(char *str)
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
	int character_counter = 0;
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
	while(*str != '\0')
 18c:	1e c0       	rjmp	.+60     	; 0x1ca <lcd_write_string+0x4c>
	{
		character_counter++;
 18e:	21 96       	adiw	r28, 0x01	; 1
		if(character_counter == 17)
 190:	c1 31       	cpi	r28, 0x11	; 17
 192:	d1 05       	cpc	r29, r1
 194:	39 f4       	brne	.+14     	; 0x1a4 <lcd_write_string+0x26>
		{
			//go to second line position 0
			lcd_goto_xy(2,0);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
 1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <lcd_write_string+0x42>
		}
		else if(character_counter > 32)
 1a4:	c1 32       	cpi	r28, 0x21	; 33
 1a6:	d1 05       	cpc	r29, r1
 1a8:	5c f0       	brlt	.+22     	; 0x1c0 <lcd_write_string+0x42>
		{
			//clear display
			lcd_write_command(clear_display);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
			//go to first line position 0
			lcd_goto_xy(1,0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
			character_counter = 0;
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	d0 e0       	ldi	r29, 0x00	; 0
		}
		lcd_write_char(*str);
 1c0:	f8 01       	movw	r30, r16
 1c2:	81 91       	ld	r24, Z+
 1c4:	8f 01       	movw	r16, r30
 1c6:	0e 94 56 00 	call	0xac	; 0xac <lcd_write_char>
}

void lcd_write_string(char *str)
{
	int character_counter = 0;
	while(*str != '\0')
 1ca:	f8 01       	movw	r30, r16
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	de cf       	rjmp	.-68     	; 0x18e <lcd_write_string+0x10>
			character_counter = 0;
		}
		lcd_write_char(*str);
		str++;
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <lcd_clear>:
	}
}

void lcd_clear(void)
{
	lcd_write_command(clear_display);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 1e2:	08 95       	ret

000001e4 <lcd_init>:
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	93 e1       	ldi	r25, 0x13	; 19
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x4>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0xa>
 1ee:	00 00       	nop

void lcd_init(void)
{
	_delay_ms(20);
	//LCD data set as output
	lcd_data_dir |= (0xFF << Data_shift);
 1f0:	8a b3       	in	r24, 0x1a	; 26
 1f2:	80 6f       	ori	r24, 0xF0	; 240
 1f4:	8a bb       	out	0x1a, r24	; 26
	//set RS,RW,E as output
	Set_bit(lcd_ctrl_dir, EN);
 1f6:	87 b3       	in	r24, 0x17	; 23
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	87 bb       	out	0x17, r24	; 23
	Set_bit(lcd_ctrl_dir, RS);
 1fc:	87 b3       	in	r24, 0x17	; 23
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	87 bb       	out	0x17, r24	; 23
	Set_bit(lcd_ctrl_dir, RW);
 202:	87 b3       	in	r24, 0x17	; 23
 204:	84 60       	ori	r24, 0x04	; 4
 206:	87 bb       	out	0x17, r24	; 23
	lcd_ctrl_port &= ~((1 << EN) | (1 << RS) | (1 << RW));
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	81 7f       	andi	r24, 0xF1	; 241
 20c:	88 bb       	out	0x18, r24	; 24
	lcd_write_command(0x30);
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 214:	83 ec       	ldi	r24, 0xC3	; 195
 216:	99 e0       	ldi	r25, 0x09	; 9
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x34>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x3a>
 21e:	00 00       	nop
	_delay_ms(10);
	lcd_write_command(0x30);
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	92 e4       	ldi	r25, 0x42	; 66
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x44>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init+0x4a>
	_delay_us(200);
	lcd_write_command(0x30);
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	lcd_write_command(function_set_8bit);
	#endif
	
	#ifdef FOUR_BIT_MODE
	//select 4-bit mode
	lcd_write_command(0x02);
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	lcd_write_command(function_set_4bit);
 23a:	88 e2       	ldi	r24, 0x28	; 40
 23c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	lcd_write_command(0x08);
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	#endif
	//display off
	lcd_write_command(display_off_cursor_off);
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	//clear display
	lcd_clear();
 24c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_clear>
	//entry mode set
	lcd_write_command(Entry_mode);
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
	//display on cursor blinking
	lcd_write_command(Display_on_Cursor_blinking);
 256:	8f e0       	ldi	r24, 0x0F	; 15
 258:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 25c:	08 95       	ret

0000025e <main>:

char n[10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
int main(void)
{
	
	sei();
 25e:	78 94       	sei
	uint8_t x,z,i =0;
	uint8_t*  y;
uint8_t str[10];
lcd_init();
 260:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
UART_INIT();
 264:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_INIT>
lcd_goto_xy(1,0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
lcd_write_string("UART TX");
 274:	8b e6       	ldi	r24, 0x6B	; 107
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_string>
UART_Send_Str("MANAL");
 27c:	83 e7       	ldi	r24, 0x73	; 115
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 72 01 	call	0x2e4	; 0x2e4 <UART_Send_Str>

UART_SendString_Asynch("Ahmed ");
 284:	89 e7       	ldi	r24, 0x79	; 121
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 92 01 	call	0x324	; 0x324 <UART_SendString_Asynch>
char n[10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
int main(void)
{
	
	sei();
	uint8_t x,z,i =0;
 28c:	c0 e0       	ldi	r28, 0x00	; 0
		//need to update to be asynchronous
	//	lcd_goto_xy(2,0);
	//	UART_Receive_Str(str);
	//	lcd_write_string(str);
		
		lcd_goto_xy(1,0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
		lcd_write_char(n[i]);
 29a:	ec 2f       	mov	r30, r28
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	80 81       	ld	r24, Z
 2a4:	0e 94 56 00 	call	0xac	; 0xac <lcd_write_char>
		i++;
 2a8:	cf 5f       	subi	r28, 0xFF	; 255
		if(i==10)
 2aa:	ca 30       	cpi	r28, 0x0A	; 10
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <main+0x52>
		i=0;
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	87 ea       	ldi	r24, 0xA7	; 167
 2b2:	91 e6       	ldi	r25, 0x61	; 97
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x56>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x5c>
 2ba:	00 00       	nop
 2bc:	e8 cf       	rjmp	.-48     	; 0x28e <main+0x30>

000002be <UART_INIT>:
	
}

void UART_RX_InterruptDisable(void)
{
	CLR_BIT(UCSRB,RXCIE);
 2be:	83 e3       	ldi	r24, 0x33	; 51
 2c0:	89 b9       	out	0x09, r24	; 9
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	8d 7f       	andi	r24, 0xFD	; 253
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	8a b1       	in	r24, 0x0a	; 10
 2ca:	88 60       	ori	r24, 0x08	; 8
 2cc:	8a b9       	out	0x0a, r24	; 10
 2ce:	8a b1       	in	r24, 0x0a	; 10
 2d0:	80 61       	ori	r24, 0x10	; 16
 2d2:	8a b9       	out	0x0a, r24	; 10
 2d4:	08 95       	ret

000002d6 <UART_Send>:
 2d6:	9b b1       	in	r25, 0x0b	; 11
 2d8:	92 95       	swap	r25
 2da:	96 95       	lsr	r25
 2dc:	97 70       	andi	r25, 0x07	; 7
 2de:	d9 f3       	breq	.-10     	; 0x2d6 <UART_Send>
 2e0:	8c b9       	out	0x0c, r24	; 12
 2e2:	08 95       	ret

000002e4 <UART_Send_Str>:
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	8c 01       	movw	r16, r24
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <UART_Send_Str+0x12>
 2f0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_Send>
 2f4:	cf 5f       	subi	r28, 0xFF	; 255
 2f6:	f8 01       	movw	r30, r16
 2f8:	ec 0f       	add	r30, r28
 2fa:	f1 1d       	adc	r31, r1
 2fc:	80 81       	ld	r24, Z
 2fe:	c8 17       	cp	r28, r24
 300:	b8 f3       	brcs	.-18     	; 0x2f0 <UART_Send_Str+0xc>
 302:	8d e0       	ldi	r24, 0x0D	; 13
 304:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_Send>
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <UART_SendNoBlock>:
 310:	8c b9       	out	0x0c, r24	; 12
 312:	08 95       	ret

00000314 <UART_TX_InterruptEnable>:
	
}
void UART_TX_InterruptEnable(void)
{
	SET_BIT(UCSRB,TXCIE);	
 314:	8a b1       	in	r24, 0x0a	; 10
 316:	80 64       	ori	r24, 0x40	; 64
 318:	8a b9       	out	0x0a, r24	; 10
 31a:	08 95       	ret

0000031c <UART_TX_InterruptDisable>:
}
void UART_TX_InterruptDisable(void)
{
	CLR_BIT(UCSRB,TXCIE);
 31c:	8a b1       	in	r24, 0x0a	; 10
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	8a b9       	out	0x0a, r24	; 10
 322:	08 95       	ret

00000324 <UART_SendString_Asynch>:
	
}

void UART_SendString_Asynch(uint8_t* str)
{
 324:	9c 01       	movw	r18, r24
	if(flag_send ==1)               //to make sure that the function didn't handle another string
 326:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <flag_send>
 32a:	91 30       	cpi	r25, 0x01	; 1
 32c:	41 f4       	brne	.+16     	; 0x33e <UART_SendString_Asynch+0x1a>
	{
		TX_str=str;
 32e:	30 93 82 00 	sts	0x0082, r19	; 0x800082 <TX_str+0x1>
 332:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <TX_str>
		flag_send =0;
 336:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <flag_send>
		UART_TX_InterruptEnable();
 33a:	0e 94 8a 01 	call	0x314	; 0x314 <UART_TX_InterruptEnable>
 33e:	08 95       	ret

00000340 <__vector_15>:
}
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)

//ISR(USART_TXC_vect)
{
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	static uint8_t i=0;
	UART_SendNoBlock(TX_str[i]);
 362:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 366:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <TX_str>
 36a:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <TX_str+0x1>
 36e:	e8 0f       	add	r30, r24
 370:	f1 1d       	adc	r31, r1
 372:	80 81       	ld	r24, Z
 374:	0e 94 88 01 	call	0x310	; 0x310 <UART_SendNoBlock>
	if(TX_str[i] != '\0')
 378:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 37c:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <TX_str>
 380:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <TX_str+0x1>
 384:	e8 0f       	add	r30, r24
 386:	f1 1d       	adc	r31, r1
 388:	90 81       	ld	r25, Z
 38a:	99 23       	and	r25, r25
 38c:	21 f0       	breq	.+8      	; 0x396 <__vector_15+0x56>
	{
		i++;
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__vector_15+0x64>
		
	}
	else
	{
		UART_TX_InterruptDisable();
 396:	0e 94 8e 01 	call	0x31c	; 0x31c <UART_TX_InterruptDisable>
		i=0;
 39a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
		flag_send =1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <flag_send>
	}
}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
