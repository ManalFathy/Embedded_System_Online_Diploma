
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000eb4  08000eb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ecc  08000ecc  00010ed4  2**0
                  CONTENTS
  4 .ARM          00000000  08000ecc  08000ecc  00010ed4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ecc  08000ed4  00010ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000ed4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000ed4  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ed4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051c3  00000000  00000000  00010efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c83  00000000  00000000  000160c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d54  00000000  00000000  00016d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e08  00000000  00000000  00017e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027ef  00000000  00000000  00018c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a9ff  00000000  00000000  0001b487  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025e86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006f0  00000000  00000000  00025f04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e9c 	.word	0x08000e9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e9c 	.word	0x08000e9c

08000170 <clock_init>:
#include "lcd.h"
#include "keypad.h"

unsigned char ch ;
void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPI1_IRQ_Callback>:

void SPI1_IRQ_Callback(struct S_IRQ_SRC irq_src)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
#ifdef MCU_ACT_AS_Slave
	if(irq_src.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPI1_IRQ_Callback+0x2e>
	{
		ch=0xf;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPI1_IRQ_Callback+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1,&ch, disable);
 80001be:	2201      	movs	r2, #1
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPI1_IRQ_Callback+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPI1_IRQ_Callback+0x3c>)
 80001c4:	f000 fa80 	bl	80006c8 <MCAL_SPI_TX_RX>
		MCAL_UART_SendData(USART1, &ch,enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPI1_IRQ_Callback+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPI1_IRQ_Callback+0x40>)
 80001ce:	f000 fcb9 	bl	8000b44 <MCAL_UART_SendData>
	}
#endif



}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000028 	.word	0x20000028
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <M_UART_IRQ_Callback>:
void M_UART_IRQ_Callback(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//send to SPI
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, 0); //enable SS
	MCAL_SPI_TX_RX(SPI1, &ch, enable);
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, 1);
#endif
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pincfg;
	UART_Config uartCFG ;

	clock_init();
 80001fa:	f7ff ffb9 	bl	8000170 <clock_init>
	//===============================UART INIT=========
	//PA9 TX
	//PA10 RX
	//PA11 CTS
	//PA12 RTS
	uartCFG.BaudRate = UART_BaudRate_115200;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	61fb      	str	r3, [r7, #28]
	uartCFG.HwFlowCtl =UART_HwFlowCtl_NONE;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uartCFG.Parity = UART_Parity_NONE;
 800020a:	2300      	movs	r3, #0
 800020c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000210:	2320      	movs	r3, #32
 8000212:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.P_IRQ_Callback = M_UART_IRQ_Callback;
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <main+0x84>)
 8000218:	62bb      	str	r3, [r7, #40]	; 0x28
	uartCFG.Payload_Length = UART_Payload_8B ;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3020 	strb.w	r3, [r7, #32]
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 8000220:	230c      	movs	r3, #12
 8000222:	763b      	strb	r3, [r7, #24]
	uartCFG.StopBits = UART_StopBits_1 ;
 8000224:	2300      	movs	r3, #0
 8000226:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	MCAL_UART_INIT(USART1, &uartCFG);
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	4619      	mov	r1, r3
 8000230:	4812      	ldr	r0, [pc, #72]	; (800027c <main+0x88>)
 8000232:	f000 fbc5 	bl	80009c0 <MCAL_UART_INIT>
	MCAL_UART_GPIO_Set_Pins(USART1) ;
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x88>)
 8000238:	f000 fca0 	bl	8000b7c <MCAL_UART_GPIO_Set_Pins>
	//PA6 :SPI1_MISO
	//PA7 :SPI1_MOSI
	SPI_Config SPI1CFG;

	//Common configuration
	SPI1CFG.CLKPhase = SPI_CLKPhase_2ndEDGE_first_data_capture_edge;
 800023c:	2301      	movs	r3, #1
 800023e:	817b      	strh	r3, [r7, #10]
	SPI1CFG.CLKPolarity = SPI_CLKPolarity_High_when_idle;
 8000240:	2302      	movs	r3, #2
 8000242:	813b      	strh	r3, [r7, #8]
	SPI1CFG.Data_Size = SPI_Data_Size_8BIT;
 8000244:	2300      	movs	r3, #0
 8000246:	80fb      	strh	r3, [r7, #6]
	SPI1CFG.frame_format= SPI_frame_format_MSB_transmitted_first;
 8000248:	2300      	movs	r3, #0
 800024a:	80bb      	strh	r3, [r7, #4]
	//assume by default pclk2 = 8MHZ
	SPI1CFG.SPI_BAUDRATEPrescaler = SPI_BAUDRATEPrescaler_8;
 800024c:	2310      	movs	r3, #16
 800024e:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.Communication_Mode = SPI_Communication_Mode_2LINES;
 8000250:	2300      	movs	r3, #0
 8000252:	807b      	strh	r3, [r7, #2]



#ifdef MCU_ACT_AS_Slave

	SPI1CFG.Device_Mode = SPI_Device_Mode_Slave ;
 8000254:	2300      	movs	r3, #0
 8000256:	803b      	strh	r3, [r7, #0]
	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE ;
 8000258:	2340      	movs	r3, #64	; 0x40
 800025a:	823b      	strh	r3, [r7, #16]
	SPI1CFG.NSS = SPI_NSS_Hard_Slave;
 800025c:	2300      	movs	r3, #0
 800025e:	81bb      	strh	r3, [r7, #12]
	SPI1CFG.P_IRQ_CallBack = SPI1_IRQ_Callback;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x8c>)
 8000262:	617b      	str	r3, [r7, #20]

#endif

	MCAL_SPI_INIT(SPI1, &SPI1CFG);
 8000264:	463b      	mov	r3, r7
 8000266:	4619      	mov	r1, r3
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x90>)
 800026a:	f000 f9a1 	bl	80005b0 <MCAL_SPI_INIT>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x90>)
 8000270:	f000 fa54 	bl	800071c <MCAL_SPI_GPIO_Set_Pins>
	while(1)
 8000274:	e7fe      	b.n	8000274 <main+0x80>
 8000276:	bf00      	nop
 8000278:	080001e9 	.word	0x080001e9
 800027c:	40013800 	.word	0x40013800
 8000280:	080001a5 	.word	0x080001a5
 8000284:	40013000 	.word	0x40013000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fdcd 	bl	8000e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff9b 	bl	80001f4 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000ed4 	.word	0x08000ed4
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	20000068 	.word	0x20000068

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
//Clear pending register by writing 1
	EXTI->PR |= 1<< 0 ;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]
	//Call IRQ Callback
	GP_IRQ_Callback[0]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI0_IRQHandler+0x20>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4798      	blx	r3
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	2000002c 	.word	0x2000002c

08000300 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 1 ;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI1_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI1_IRQHandler+0x1c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[1]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x20>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	2000002c 	.word	0x2000002c

08000324 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 2 ;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[2]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI2_IRQHandler+0x20>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	2000002c 	.word	0x2000002c

08000348 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 3 ;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[3]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI3_IRQHandler+0x20>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	2000002c 	.word	0x2000002c

0800036c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 4 ;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[4]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI4_IRQHandler+0x20>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	2000002c 	.word	0x2000002c

08000390 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  if(EXTI->PR & 1<<5) { EXTI->PR |= 1<< 5 ; GP_IRQ_Callback[5](); }
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x22>
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4798      	blx	r3
  if(EXTI->PR & 1<<6) { EXTI->PR |= 1<< 6 ; GP_IRQ_Callback[6](); }
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d008      	beq.n	80003d0 <EXTI9_5_IRQHandler+0x40>
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4798      	blx	r3
  if(EXTI->PR & 1<<7) { EXTI->PR |= 1<< 7 ; GP_IRQ_Callback[7](); }
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <EXTI9_5_IRQHandler+0x5e>
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4798      	blx	r3
  if(EXTI->PR & 1<<8) { EXTI->PR |= 1<< 8 ; GP_IRQ_Callback[8](); }
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d008      	beq.n	800040c <EXTI9_5_IRQHandler+0x7c>
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	4798      	blx	r3
  if(EXTI->PR & 1<<9) { EXTI->PR |= 1<< 9 ; GP_IRQ_Callback[9](); }
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI9_5_IRQHandler+0x9a>
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4798      	blx	r3
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	2000002c 	.word	0x2000002c

08000438 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	  if(EXTI->PR & 1<<10) { EXTI->PR |= 1<< 10 ; GP_IRQ_Callback[10](); }
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x22>
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a29      	ldr	r2, [pc, #164]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	4798      	blx	r3
	  if(EXTI->PR & 1<<11) { EXTI->PR |= 1<< 11 ; GP_IRQ_Callback[11](); }
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0x40>
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4798      	blx	r3
	  if(EXTI->PR & 1<<12) { EXTI->PR |= 1<< 12 ; GP_IRQ_Callback[12](); }
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d008      	beq.n	8000496 <EXTI15_10_IRQHandler+0x5e>
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048e:	6153      	str	r3, [r2, #20]
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4798      	blx	r3
	  if(EXTI->PR & 1<<13) { EXTI->PR |= 1<< 13 ; GP_IRQ_Callback[13](); }
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d008      	beq.n	80004b4 <EXTI15_10_IRQHandler+0x7c>
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	4798      	blx	r3
	  if(EXTI->PR & 1<<14) { EXTI->PR |= 1<< 12 ; GP_IRQ_Callback[14](); }
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI15_10_IRQHandler+0x9a>
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ca:	6153      	str	r3, [r2, #20]
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d0:	4798      	blx	r3
	  if(EXTI->PR & 1<<15) { EXTI->PR |= 1<< 13 ; GP_IRQ_Callback[15](); }
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI15_10_IRQHandler+0xb8>
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ee:	4798      	blx	r3
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	2000002c 	.word	0x2000002c

080004fc <MCAL_RCC_GetSYSCLK1Freq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPRrescTable[16U] = { 0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};//shift 1 right == multiply by 2
uint32_t MCAL_RCC_GetSYSCLK1Freq(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
switch((RCC->CFGR >> 2) &0b11)
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MCAL_RCC_GetSYSCLK1Freq+0x30>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	089b      	lsrs	r3, r3, #2
 8000506:	f003 0303 	and.w	r3, r3, #3
 800050a:	2b01      	cmp	r3, #1
 800050c:	d006      	beq.n	800051c <MCAL_RCC_GetSYSCLK1Freq+0x20>
 800050e:	2b01      	cmp	r3, #1
 8000510:	d302      	bcc.n	8000518 <MCAL_RCC_GetSYSCLK1Freq+0x1c>
 8000512:	2b02      	cmp	r3, #2
 8000514:	d004      	beq.n	8000520 <MCAL_RCC_GetSYSCLK1Freq+0x24>
 8000516:	e005      	b.n	8000524 <MCAL_RCC_GetSYSCLK1Freq+0x28>
		{
case 0:
	return HSI_RC_CLK;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <MCAL_RCC_GetSYSCLK1Freq+0x34>)
 800051a:	e003      	b.n	8000524 <MCAL_RCC_GetSYSCLK1Freq+0x28>
	break;
case 1:
	//to do need to calculate it //externel
	return HSE_CLK ;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <MCAL_RCC_GetSYSCLK1Freq+0x38>)
 800051e:	e001      	b.n	8000524 <MCAL_RCC_GetSYSCLK1Freq+0x28>
	break;
case 2:
	//to do need to calculate it
		return 16000000 ;
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <MCAL_RCC_GetSYSCLK1Freq+0x38>)
 8000522:	e7ff      	b.n	8000524 <MCAL_RCC_GetSYSCLK1Freq+0x28>

	break;

		}
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000
 8000530:	007a1200 	.word	0x007a1200
 8000534:	00f42400 	.word	0x00f42400

08000538 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_GetSYSCLK1Freq() >> AHBPRrescTable[(RCC->CFGR >> 4) &0b1111]);
 800053c:	f7ff ffde 	bl	80004fc <MCAL_RCC_GetSYSCLK1Freq>
 8000540:	4601      	mov	r1, r0
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	091b      	lsrs	r3, r3, #4
 8000548:	f003 030f 	and.w	r3, r3, #15
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <MCAL_RCC_GetHCLKFreq+0x24>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000554:	4618      	mov	r0, r3
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	08000ebc 	.word	0x08000ebc

08000560 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPRrescTable[(RCC->CFGR >> 8) &0b111]);
 8000564:	f7ff ffe8 	bl	8000538 <MCAL_RCC_GetHCLKFreq>
 8000568:	4601      	mov	r1, r0
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	f003 0307 	and.w	r3, r3, #7
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000576:	5cd3      	ldrb	r3, [r2, r3]
 8000578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800057c:	4618      	mov	r0, r3
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	08000eb4 	.word	0x08000eb4

08000588 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPRrescTable[(RCC->CFGR >> 11) &0b111]);
 800058c:	f7ff ffd4 	bl	8000538 <MCAL_RCC_GetHCLKFreq>
 8000590:	4601      	mov	r1, r0
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	0adb      	lsrs	r3, r3, #11
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <MCAL_RCC_GetPCLK2Freq+0x24>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	08000eb4 	.word	0x08000eb4

080005b0 <MCAL_SPI_INIT>:
 * @retval           -none
 * Note              -support for SPI Full duplex Master and slave only
 */

void MCAL_SPI_INIT(SPI_TypeDef * SPIx , SPI_Config* SPI_confg)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	//safty for Registers
	uint16_t tempreg_CR1 =0 ;
 80005ba:	2300      	movs	r3, #0
 80005bc:	81fb      	strh	r3, [r7, #14]
	uint16_t tempreg_CR2 =0 ;
 80005be:	2300      	movs	r3, #0
 80005c0:	81bb      	strh	r3, [r7, #12]

	if(SPIx ==SPI1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a3b      	ldr	r2, [pc, #236]	; (80006b4 <MCAL_SPI_INIT+0x104>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d109      	bne.n	80005de <MCAL_SPI_INIT+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_confg ;
 80005ca:	4a3b      	ldr	r2, [pc, #236]	; (80006b8 <MCAL_SPI_INIT+0x108>)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <MCAL_SPI_INIT+0x10c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a39      	ldr	r2, [pc, #228]	; (80006bc <MCAL_SPI_INIT+0x10c>)
 80005d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	e00c      	b.n	80005f8 <MCAL_SPI_INIT+0x48>

	}else if(SPIx ==SPI2)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a37      	ldr	r2, [pc, #220]	; (80006c0 <MCAL_SPI_INIT+0x110>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d108      	bne.n	80005f8 <MCAL_SPI_INIT+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_confg ;
 80005e6:	4a34      	ldr	r2, [pc, #208]	; (80006b8 <MCAL_SPI_INIT+0x108>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80005ec:	4b33      	ldr	r3, [pc, #204]	; (80006bc <MCAL_SPI_INIT+0x10c>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a32      	ldr	r2, [pc, #200]	; (80006bc <MCAL_SPI_INIT+0x10c>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI CR1:Bit6 SPE
	tempreg_CR1 = (0x1U <<6);
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	81fb      	strh	r3, [r7, #14]

	//Master 0r slave
	tempreg_CR1 |= SPI_confg->Device_Mode;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	89fb      	ldrh	r3, [r7, #14]
 8000602:	4313      	orrs	r3, r2
 8000604:	81fb      	strh	r3, [r7, #14]

	//SPI Communication mode
	tempreg_CR1 |= SPI_confg->Communication_Mode;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	885a      	ldrh	r2, [r3, #2]
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	4313      	orrs	r3, r2
 800060e:	81fb      	strh	r3, [r7, #14]

	//SPI Frame format
	tempreg_CR1 |= SPI_confg->frame_format;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	889a      	ldrh	r2, [r3, #4]
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	4313      	orrs	r3, r2
 8000618:	81fb      	strh	r3, [r7, #14]

	//SPI Data size
	tempreg_CR1 |= SPI_confg->Data_Size;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	88da      	ldrh	r2, [r3, #6]
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	4313      	orrs	r3, r2
 8000622:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK POLARITY
	tempreg_CR1 |= SPI_confg->CLKPolarity;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	891a      	ldrh	r2, [r3, #8]
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	4313      	orrs	r3, r2
 800062c:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK PHASE
	tempreg_CR1 |= SPI_confg->CLKPhase;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	895a      	ldrh	r2, [r3, #10]
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	4313      	orrs	r3, r2
 8000636:	81fb      	strh	r3, [r7, #14]

	//===================================NSS=================
	if(SPI_confg->NSS == SPI_NSS_Hard_Master_SS_output_enable)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	899b      	ldrh	r3, [r3, #12]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d105      	bne.n	800064c <MCAL_SPI_INIT+0x9c>
	{
		tempreg_CR2 |= SPI_confg->NSS;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	899a      	ldrh	r2, [r3, #12]
 8000644:	89bb      	ldrh	r3, [r7, #12]
 8000646:	4313      	orrs	r3, r2
 8000648:	81bb      	strh	r3, [r7, #12]
 800064a:	e004      	b.n	8000656 <MCAL_SPI_INIT+0xa6>
		tempreg_CR2 &= SPI_confg->NSS;

	}
	else
	{
		tempreg_CR1 |= SPI_confg->NSS;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	899a      	ldrh	r2, [r3, #12]
 8000650:	89fb      	ldrh	r3, [r7, #14]
 8000652:	4313      	orrs	r3, r2
 8000654:	81fb      	strh	r3, [r7, #14]
	}

	//baud rate
	tempreg_CR1 |= SPI_confg->SPI_BAUDRATEPrescaler;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	89da      	ldrh	r2, [r3, #14]
 800065a:	89fb      	ldrh	r3, [r7, #14]
 800065c:	4313      	orrs	r3, r2
 800065e:	81fb      	strh	r3, [r7, #14]

	//IRQ
	if(SPI_confg ->IRQ_Enable != SPI_IRQ_Enable_NONE)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	8a1b      	ldrh	r3, [r3, #16]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d019      	beq.n	800069c <MCAL_SPI_INIT+0xec>
	{
		tempreg_CR2 |= SPI_confg->IRQ_Enable;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	8a1a      	ldrh	r2, [r3, #16]
 800066c:	89bb      	ldrh	r3, [r7, #12]
 800066e:	4313      	orrs	r3, r2
 8000670:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MCAL_SPI_INIT+0x104>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <MCAL_SPI_INIT+0xd8>
		{
			NVIC_IRQ35_SPI1_Enable ;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MCAL_SPI_INIT+0x114>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <MCAL_SPI_INIT+0x114>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	e009      	b.n	800069c <MCAL_SPI_INIT+0xec>
		}
		else if(SPIx == SPI2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <MCAL_SPI_INIT+0x110>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d105      	bne.n	800069c <MCAL_SPI_INIT+0xec>
		{
			NVIC_IRQ36_SPI2_Enable ;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MCAL_SPI_INIT+0x114>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <MCAL_SPI_INIT+0x114>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
		}
	}


	SPIx->CR1 = tempreg_CR1 ;
 800069c:	89fa      	ldrh	r2, [r7, #14]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempreg_CR2 ;
 80006a2:	89ba      	ldrh	r2, [r7, #12]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]

}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40013000 	.word	0x40013000
 80006b8:	2000001c 	.word	0x2000001c
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40003800 	.word	0x40003800
 80006c4:	e000e104 	.word	0xe000e104

080006c8 <MCAL_SPI_TX_RX>:
 * @retval           -none
 * Note              -none
 */

void MCAL_SPI_TX_RX(SPI_TypeDef * SPIx , uint16_t* pTxBuffer , enum Polling_mechanism PollingEn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	4613      	mov	r3, r2
 80006d4:	71fb      	strb	r3, [r7, #7]

	if(PollingEn == enable)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d106      	bne.n	80006ea <MCAL_SPI_TX_RX+0x22>
		while(! ((SPIx->SR) & SPI_SR_TXE)); //wait until the TX buffer be empty
 80006dc:	bf00      	nop
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f9      	beq.n	80006de <MCAL_SPI_TX_RX+0x16>

	SPIx->DR = *pTxBuffer;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	60da      	str	r2, [r3, #12]

	if(PollingEn == enable)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d106      	bne.n	8000708 <MCAL_SPI_TX_RX+0x40>
		while(! ((SPIx->SR) & SPI_SR_RXNE)); //wait until the RX buffer be not empty
 80006fa:	bf00      	nop
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f9      	beq.n	80006fc <MCAL_SPI_TX_RX+0x34>

	*pTxBuffer = SPIx->DR;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	b29a      	uxth	r2, r3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	801a      	strh	r2, [r3, #0]

}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <MCAL_SPI_GPIO_Set_Pins>:
 * @retval           -none
 * Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_SPI_INIT()
 */

void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef * SPIx)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pincfg;
	if (SPIx == SPI1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a73      	ldr	r2, [pc, #460]	; (80008f4 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d169      	bne.n	8000800 <MCAL_SPI_GPIO_Set_Pins+0xe4>
		//PA4 :SPI1_NSS
		//PA5 :SPI1_SCK
		//PA6 :SPI1_MISO
		//PA7 :SPI1_MOSI
		//from recommendation table in GPIO chapter
		if(Global_SPI_Config[SPI1_Index]->Device_Mode ==SPI_Device_Mode_Master)
 800072c:	4b72      	ldr	r3, [pc, #456]	; (80008f8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	2b04      	cmp	r3, #4
 8000734:	d134      	bne.n	80007a0 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			//PA4 :SPI1_NSS

			switch(Global_SPI_Config[SPI1_Index]->NSS)
 8000736:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d10c      	bne.n	800075a <MCAL_SPI_GPIO_Set_Pins+0x3e>
				MCAL_GPIO_Init(GPIOA,&pincfg);
				break;

			case SPI_NSS_Hard_Master_SS_output_enable :
				//Hardware master ALternative output
				pincfg.GPIO_PinNumber = GPIO_PIN_4;
 8000740:	2310      	movs	r3, #16
 8000742:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 8000744:	2306      	movs	r3, #6
 8000746:	73bb      	strb	r3, [r7, #14]
				pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA,&pincfg);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	486a      	ldr	r0, [pc, #424]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000754:	f000 faf9 	bl	8000d4a <MCAL_GPIO_Init>
				break;
 8000758:	bf00      	nop

			}
			//PA5 :SPI1_SCK
			//Master output alternative function push pull
			pincfg.GPIO_PinNumber = GPIO_PIN_5;
 800075a:	2320      	movs	r3, #32
 800075c:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 800075e:	2306      	movs	r3, #6
 8000760:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000762:	2301      	movs	r3, #1
 8000764:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA,&pincfg);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4863      	ldr	r0, [pc, #396]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800076e:	f000 faec 	bl	8000d4a <MCAL_GPIO_Init>

			//PA6 :SPI1_MISO
			//Master input floating in case of FULL Duplex
			pincfg.GPIO_PinNumber = GPIO_PIN_6;
 8000772:	2340      	movs	r3, #64	; 0x40
 8000774:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 8000776:	2301      	movs	r3, #1
 8000778:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA,&pincfg);
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	4619      	mov	r1, r3
 8000780:	485e      	ldr	r0, [pc, #376]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000782:	f000 fae2 	bl	8000d4a <MCAL_GPIO_Init>

			//PA7 :SPI1_MOSI
			//Master ouput alternative function PP in case of FULL Duplex

			pincfg.GPIO_PinNumber = GPIO_PIN_7;
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 800078a:	2306      	movs	r3, #6
 800078c:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA,&pincfg);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4858      	ldr	r0, [pc, #352]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800079a:	f000 fad6 	bl	8000d4a <MCAL_GPIO_Init>


		}

	}
}
 800079e:	e0a4      	b.n	80008ea <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hard_Slave) //in case of sw there is no gpio configuration
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d109      	bne.n	80007be <MCAL_SPI_GPIO_Set_Pins+0xa2>
				pincfg.GPIO_PinNumber = GPIO_PIN_4;
 80007aa:	2310      	movs	r3, #16
 80007ac:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA,&pincfg);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	4850      	ldr	r0, [pc, #320]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007ba:	f000 fac6 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_5;
 80007be:	2320      	movs	r3, #32
 80007c0:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA,&pincfg);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	484b      	ldr	r0, [pc, #300]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007ce:	f000 fabc 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_6;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 80007d6:	2306      	movs	r3, #6
 80007d8:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 80007da:	2301      	movs	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA,&pincfg);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	4845      	ldr	r0, [pc, #276]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007e6:	f000 fab0 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_7;
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA,&pincfg);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4840      	ldr	r0, [pc, #256]	; (80008fc <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007fa:	f000 faa6 	bl	8000d4a <MCAL_GPIO_Init>
}
 80007fe:	e074      	b.n	80008ea <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	else if (SPIx == SPI2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d170      	bne.n	80008ea <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode ==SPI_Device_Mode_Master)
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d138      	bne.n	8000884 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI2_Index]->NSS)
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	899b      	ldrh	r3, [r3, #12]
 8000818:	2b04      	cmp	r3, #4
 800081a:	d10d      	bne.n	8000838 <MCAL_SPI_GPIO_Set_Pins+0x11c>
				pincfg.GPIO_PinNumber = GPIO_PIN_12;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 8000822:	2306      	movs	r3, #6
 8000824:	73bb      	strb	r3, [r7, #14]
				pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000826:	2301      	movs	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB,&pincfg);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4834      	ldr	r0, [pc, #208]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000832:	f000 fa8a 	bl	8000d4a <MCAL_GPIO_Init>
				break;
 8000836:	bf00      	nop
			pincfg.GPIO_PinNumber = GPIO_PIN_13;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 800083e:	2306      	movs	r3, #6
 8000840:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB,&pincfg);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	482d      	ldr	r0, [pc, #180]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800084e:	f000 fa7c 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_14;
 8000852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000856:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 8000858:	2301      	movs	r3, #1
 800085a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB,&pincfg);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4828      	ldr	r0, [pc, #160]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000864:	f000 fa71 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_15;
 8000868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800086c:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 800086e:	2306      	movs	r3, #6
 8000870:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000872:	2301      	movs	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB,&pincfg);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4821      	ldr	r0, [pc, #132]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800087e:	f000 fa64 	bl	8000d4a <MCAL_GPIO_Init>
}
 8000882:	e032      	b.n	80008ea <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_Hard_Slave) //in case of sw there is no gpio configuration
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	899b      	ldrh	r3, [r3, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10a      	bne.n	80008a4 <MCAL_SPI_GPIO_Set_Pins+0x188>
				pincfg.GPIO_PinNumber = GPIO_PIN_12;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 8000894:	2301      	movs	r3, #1
 8000896:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB,&pincfg);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008a0:	f000 fa53 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_13;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB,&pincfg);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008b6:	f000 fa48 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_14;
 80008ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008be:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 80008c0:	2306      	movs	r3, #6
 80008c2:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 80008c4:	2301      	movs	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB,&pincfg);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008d0:	f000 fa3b 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_15;
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_INPUT_FLO;
 80008da:	2301      	movs	r3, #1
 80008dc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB,&pincfg);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008e6:	f000 fa30 	bl	8000d4a <MCAL_GPIO_Init>
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40013000 	.word	0x40013000
 80008f8:	2000001c 	.word	0x2000001c
 80008fc:	40010800 	.word	0x40010800
 8000900:	40003800 	.word	0x40003800
 8000904:	40010c00 	.word	0x40010c00

08000908 <SPI1_IRQHandler>:
 *                                        IRQ
 * ====================================================================================================
 */

void SPI1_IRQHandler (void)  /* SPI1 global interrupt*/
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <SPI1_IRQHandler+0x54>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	f362 0300 	bfi	r3, r2, #0, #1
 8000920:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <SPI1_IRQHandler+0x54>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	793b      	ldrb	r3, [r7, #4]
 800092e:	f362 0341 	bfi	r3, r2, #1, #1
 8000932:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI1->SR & (1<<4)) >> 4);
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <SPI1_IRQHandler+0x54>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	793b      	ldrb	r3, [r7, #4]
 8000942:	f362 0382 	bfi	r3, r2, #2, #1
 8000946:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack (irq_src);
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SPI1_IRQHandler+0x58>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	7938      	ldrb	r0, [r7, #4]
 8000950:	4798      	blx	r3

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40013000 	.word	0x40013000
 8000960:	2000001c 	.word	0x2000001c

08000964 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <SPI2_IRQHandler+0x54>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	085b      	lsrs	r3, r3, #1
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	793b      	ldrb	r3, [r7, #4]
 8000978:	f362 0300 	bfi	r3, r2, #0, #1
 800097c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <SPI2_IRQHandler+0x54>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	793b      	ldrb	r3, [r7, #4]
 800098a:	f362 0341 	bfi	r3, r2, #1, #1
 800098e:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI2->SR & (1<<4)) >> 4);
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <SPI2_IRQHandler+0x54>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	793b      	ldrb	r3, [r7, #4]
 800099e:	f362 0382 	bfi	r3, r2, #2, #1
 80009a2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack (irq_src);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SPI2_IRQHandler+0x58>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	7938      	ldrb	r0, [r7, #4]
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40003800 	.word	0x40003800
 80009bc:	2000001c 	.word	0x2000001c

080009c0 <MCAL_UART_INIT>:
 * Note              -support for now ASynch mode and clock 8 HZ
 */


void MCAL_UART_INIT(USART_TypeDef * USARTx , UART_Config* UART_config)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;
	Global_UART_Config = UART_config;
 80009ca:	4a57      	ldr	r2, [pc, #348]	; (8000b28 <MCAL_UART_INIT+0x168>)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	6013      	str	r3, [r2, #0]

	//enable the clock for given USART Peripheral
	if(USARTx == USART1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a56      	ldr	r2, [pc, #344]	; (8000b2c <MCAL_UART_INIT+0x16c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <MCAL_UART_INIT+0x26>
		RCC_USART1_CLK_EN();
 80009d8:	4b55      	ldr	r3, [pc, #340]	; (8000b30 <MCAL_UART_INIT+0x170>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a54      	ldr	r2, [pc, #336]	; (8000b30 <MCAL_UART_INIT+0x170>)
 80009de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	e014      	b.n	8000a10 <MCAL_UART_INIT+0x50>
	else if (USARTx == USART2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a52      	ldr	r2, [pc, #328]	; (8000b34 <MCAL_UART_INIT+0x174>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <MCAL_UART_INIT+0x3c>
		RCC_USART2_CLK_EN();
 80009ee:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <MCAL_UART_INIT+0x170>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <MCAL_UART_INIT+0x170>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	e009      	b.n	8000a10 <MCAL_UART_INIT+0x50>
	else if (USARTx == USART3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <MCAL_UART_INIT+0x178>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d105      	bne.n	8000a10 <MCAL_UART_INIT+0x50>
		RCC_USART3_CLK_EN();
 8000a04:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <MCAL_UART_INIT+0x170>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <MCAL_UART_INIT+0x170>)
 8000a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0e:	61d3      	str	r3, [r2, #28]

	//enable UART Module
	USARTx->CR1 |= (1<<13) ; //Bit 13 UE: USART enable
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60da      	str	r2, [r3, #12]

	//enable Mode TX RX
	USARTx->CR1 |= UART_config->USART_Mode ;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	7812      	ldrb	r2, [r2, #0]
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]

	// enable Payload width
	USARTx->CR1 |= UART_config->Payload_Length ;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	7a12      	ldrb	r2, [r2, #8]
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	60da      	str	r2, [r3, #12]

	//Configure parity bits
	USARTx->CR1 |= UART_config->Parity ;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	7a52      	ldrb	r2, [r2, #9]
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60da      	str	r2, [r3, #12]

	//configure stop bits
	USARTx->CR2 |= UART_config->StopBits;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	7a92      	ldrb	r2, [r2, #10]
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	611a      	str	r2, [r3, #16]

	//flow control
	USARTx->CR3 |= UART_config->HwFlowCtl ;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	7ad2      	ldrb	r2, [r2, #11]
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	615a      	str	r2, [r3, #20]

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3

	if(USARTx == USART1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a31      	ldr	r2, [pc, #196]	; (8000b2c <MCAL_UART_INIT+0x16c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d103      	bne.n	8000a72 <MCAL_UART_INIT+0xb2>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000a6a:	f7ff fd8d 	bl	8000588 <MCAL_RCC_GetPCLK2Freq>
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	e002      	b.n	8000a78 <MCAL_UART_INIT+0xb8>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000a72:	f7ff fd75 	bl	8000560 <MCAL_RCC_GetPCLK1Freq>
 8000a76:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(pclk ,UART_config->BaudRate ) ;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a84:	0119      	lsls	r1, r3, #4
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009a      	lsls	r2, r3, #2
 8000a90:	441a      	add	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	fb00 f303 	mul.w	r3, r0, r3
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MCAL_UART_INIT+0x17c>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	095b      	lsrs	r3, r3, #5
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	60bb      	str	r3, [r7, #8]

	USARTx->BRR =BRR ;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	609a      	str	r2, [r3, #8]

	//enable /diable interrupt
	if(UART_config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d026      	beq.n	8000b1e <MCAL_UART_INIT+0x15e>
	{
		USARTx->CR1 |= UART_config->IRQ_Enable ;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	7b12      	ldrb	r2, [r2, #12]
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60da      	str	r2, [r3, #12]

		//enable NVIC for USART IRQ
		if(USARTx == USART1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MCAL_UART_INIT+0x16c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <MCAL_UART_INIT+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MCAL_UART_INIT+0x180>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MCAL_UART_INIT+0x180>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6013      	str	r3, [r2, #0]
		else if (USARTx == USART3)
			NVIC_IRQ37_USART3_Enable;

	}

}
 8000af2:	e014      	b.n	8000b1e <MCAL_UART_INIT+0x15e>
		else if (USARTx == USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <MCAL_UART_INIT+0x174>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d106      	bne.n	8000b0a <MCAL_UART_INIT+0x14a>
			NVIC_IRQ37_USART2_Enable;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MCAL_UART_INIT+0x180>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <MCAL_UART_INIT+0x180>)
 8000b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	e009      	b.n	8000b1e <MCAL_UART_INIT+0x15e>
		else if (USARTx == USART3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <MCAL_UART_INIT+0x178>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d105      	bne.n	8000b1e <MCAL_UART_INIT+0x15e>
			NVIC_IRQ37_USART3_Enable;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MCAL_UART_INIT+0x180>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <MCAL_UART_INIT+0x180>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6013      	str	r3, [r2, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000024 	.word	0x20000024
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40004800 	.word	0x40004800
 8000b3c:	51eb851f 	.word	0x51eb851f
 8000b40:	e000e104 	.word	0xe000e104

08000b44 <MCAL_UART_SendData>:
 *param[in]          -PollingEn enable or disable the polling
 * @retval           -none
 * Note              -should initialize UART firist
 */
void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t* pTxBuffer , enum Polling_mechanism PollingEn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	71fb      	strb	r3, [r7, #7]
	//wait until TXE is set
	if (PollingEn == enable)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d106      	bne.n	8000b66 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & (1<<7))); //polling
 8000b58:	bf00      	nop
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f9      	beq.n	8000b5a <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = (* pTxBuffer & (uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (* pTxBuffer & (uint16_t)0xFF);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	605a      	str	r2, [r3, #4]
	}

}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
	...

08000b7c <MCAL_UART_GPIO_Set_Pins>:
 * @retval           -none
 * Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()
 */

void MCAL_UART_GPIO_Set_Pins (USART_TypeDef * USARTx)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pincfg;
	if(USARTx == USART1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a2b      	ldr	r2, [pc, #172]	; (8000c34 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d118      	bne.n	8000bbe <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9 ;
 8000b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b90:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 8000b92:	2306      	movs	r3, #6
 8000b94:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4825      	ldr	r0, [pc, #148]	; (8000c38 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000ba2:	f000 f8d2 	bl	8000d4a <MCAL_GPIO_Init>

		//PA10 RX
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_Mode_AF_INPUT;
 8000bac:	2308      	movs	r3, #8
 8000bae:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4820      	ldr	r0, [pc, #128]	; (8000c38 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000bb8:	f000 f8c7 	bl	8000d4a <MCAL_GPIO_Init>
				MCAL_GPIO_Init(GPIOA, &pincfg) ;

				}

		}
}
 8000bbc:	e036      	b.n	8000c2c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d116      	bne.n	8000bf4 <MCAL_UART_GPIO_Set_Pins+0x78>
			pincfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4817      	ldr	r0, [pc, #92]	; (8000c38 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000bda:	f000 f8b6 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000bde:	2308      	movs	r3, #8
 8000be0:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_AF_INPUT;
 8000be2:	2308      	movs	r3, #8
 8000be4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000bee:	f000 f8ac 	bl	8000d4a <MCAL_GPIO_Init>
}
 8000bf2:	e01b      	b.n	8000c2c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d117      	bne.n	8000c2c <MCAL_UART_GPIO_Set_Pins+0xb0>
			pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c00:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 8000c02:	2306      	movs	r3, #6
 8000c04:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000c12:	f000 f89a 	bl	8000d4a <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_11 ;
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_AF_INPUT;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000c28:	f000 f88f 	bl	8000d4a <MCAL_GPIO_Init>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40004800 	.word	0x40004800
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <USART1_IRQHandler+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4798      	blx	r3
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000024 	.word	0x20000024

08000c5c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <USART2_IRQHandler+0x10>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	4798      	blx	r3
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000024 	.word	0x20000024

08000c70 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <USART3_IRQHandler+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	4798      	blx	r3
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000024 	.word	0x20000024

08000c84 <Get_CRLH_Position>:


#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2b80      	cmp	r3, #128	; 0x80
 8000c92:	d042      	beq.n	8000d1a <Get_CRLH_Position+0x96>
 8000c94:	2b80      	cmp	r3, #128	; 0x80
 8000c96:	dc11      	bgt.n	8000cbc <Get_CRLH_Position+0x38>
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d036      	beq.n	8000d0a <Get_CRLH_Position+0x86>
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	dc06      	bgt.n	8000cae <Get_CRLH_Position+0x2a>
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d02e      	beq.n	8000d02 <Get_CRLH_Position+0x7e>
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d02e      	beq.n	8000d06 <Get_CRLH_Position+0x82>
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d028      	beq.n	8000cfe <Get_CRLH_Position+0x7a>
 8000cac:	e047      	b.n	8000d3e <Get_CRLH_Position+0xba>
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d02f      	beq.n	8000d12 <Get_CRLH_Position+0x8e>
 8000cb2:	2b40      	cmp	r3, #64	; 0x40
 8000cb4:	d02f      	beq.n	8000d16 <Get_CRLH_Position+0x92>
 8000cb6:	2b10      	cmp	r3, #16
 8000cb8:	d029      	beq.n	8000d0e <Get_CRLH_Position+0x8a>
 8000cba:	e040      	b.n	8000d3e <Get_CRLH_Position+0xba>
 8000cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cc0:	d033      	beq.n	8000d2a <Get_CRLH_Position+0xa6>
 8000cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cc6:	dc09      	bgt.n	8000cdc <Get_CRLH_Position+0x58>
 8000cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ccc:	d029      	beq.n	8000d22 <Get_CRLH_Position+0x9e>
 8000cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd2:	d028      	beq.n	8000d26 <Get_CRLH_Position+0xa2>
 8000cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd8:	d021      	beq.n	8000d1e <Get_CRLH_Position+0x9a>
 8000cda:	e030      	b.n	8000d3e <Get_CRLH_Position+0xba>
 8000cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce0:	d027      	beq.n	8000d32 <Get_CRLH_Position+0xae>
 8000ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce6:	dc03      	bgt.n	8000cf0 <Get_CRLH_Position+0x6c>
 8000ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cec:	d01f      	beq.n	8000d2e <Get_CRLH_Position+0xaa>
 8000cee:	e026      	b.n	8000d3e <Get_CRLH_Position+0xba>
 8000cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cf4:	d01f      	beq.n	8000d36 <Get_CRLH_Position+0xb2>
 8000cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cfa:	d01e      	beq.n	8000d3a <Get_CRLH_Position+0xb6>
 8000cfc:	e01f      	b.n	8000d3e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e01e      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 8000d02:	2304      	movs	r3, #4
 8000d04:	e01c      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 8000d06:	2308      	movs	r3, #8
 8000d08:	e01a      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	e018      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	e016      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 8000d12:	2314      	movs	r3, #20
 8000d14:	e014      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8000d16:	2318      	movs	r3, #24
 8000d18:	e012      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8000d1a:	231c      	movs	r3, #28
 8000d1c:	e010      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e00e      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8000d22:	2304      	movs	r3, #4
 8000d24:	e00c      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000d26:	2308      	movs	r3, #8
 8000d28:	e00a      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	e008      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	e006      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8000d32:	2314      	movs	r3, #20
 8000d34:	e004      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000d36:	2318      	movs	r3, #24
 8000d38:	e002      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000d3a:	231c      	movs	r3, #28
 8000d3c:	e000      	b.n	8000d40 <Get_CRLH_Position+0xbc>
		break ;
	}
	return 0 ;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <MCAL_GPIO_Init>:
 * Note              -stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 *                     But LQFP48 package has only GPIO A,B,part of C,D exported as external pins from thw MCU
 */

void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* Pinconfig)
{
 8000d4a:	b590      	push	{r4, r7, lr}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* configregister = NULL ;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
	configregister = (Pinconfig ->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d801      	bhi.n	8000d68 <MCAL_GPIO_Init+0x1e>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	e001      	b.n	8000d6c <MCAL_GPIO_Init+0x22>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(Pinconfig->GPIO_PinNumber)) ;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff86 	bl	8000c84 <Get_CRLH_Position>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	43da      	mvns	r2, r3
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	401a      	ands	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	601a      	str	r2, [r3, #0]

	//if pin is output
	if ( (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_PP) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_PP) )
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	789b      	ldrb	r3, [r3, #2]
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d00b      	beq.n	8000dac <MCAL_GPIO_Init+0x62>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	789b      	ldrb	r3, [r3, #2]
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d007      	beq.n	8000dac <MCAL_GPIO_Init+0x62>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d003      	beq.n	8000dac <MCAL_GPIO_Init+0x62>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d10e      	bne.n	8000dca <MCAL_GPIO_Init+0x80>
	{
		pin_config =  ((((Pinconfig->GPIO_Mode -4) << 2) | Pinconfig->GPIO_output_speed) & 0x0f );
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	3b04      	subs	r3, #4
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	b25a      	sxtb	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	78db      	ldrb	r3, [r3, #3]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e031      	b.n	8000e2e <MCAL_GPIO_Init+0xe4>
	//if pin is input
	else
	{
		// MODE = 00: Input mode (reset state)

		if ( (Pinconfig->GPIO_Mode == GPIO_Mode_Analog) || (Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_FLO ))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <MCAL_GPIO_Init+0x90>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d107      	bne.n	8000dea <MCAL_GPIO_Init+0xa0>
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e021      	b.n	8000e2e <MCAL_GPIO_Init+0xe4>

		}
		else if (Pinconfig->GPIO_Mode == GPIO_Mode_AF_INPUT) //consider it as input floating
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d102      	bne.n	8000df8 <MCAL_GPIO_Init+0xae>
		{
			pin_config =  ((((GPIO_Mode_INPUT_FLO) << 2) | 0x0) & 0x0f );
 8000df2:	2304      	movs	r3, #4
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e01a      	b.n	8000e2e <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD Input
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	73fb      	strb	r3, [r7, #15]
			if(Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_PU)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d107      	bne.n	8000e1e <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= Pinconfig->GPIO_PinNumber ;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	e007      	b.n	8000e2e <MCAL_GPIO_Init+0xe4>
			}
			else //PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~ (Pinconfig->GPIO_PinNumber) ;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	43d2      	mvns	r2, r2
 8000e28:	401a      	ands	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60da      	str	r2, [r3, #12]
		}

	}
	//write on CRL OR CRH

	(*configregister) |= ( (pin_config) << Get_CRLH_Position(Pinconfig->GPIO_PinNumber) );
 8000e2e:	7bfc      	ldrb	r4, [r7, #15]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff25 	bl	8000c84 <Get_CRLH_Position>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	fa04 f203 	lsl.w	r2, r4, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	601a      	str	r2, [r3, #0]

}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}
	...

08000e54 <__libc_init_array>:
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	2500      	movs	r5, #0
 8000e58:	4e0c      	ldr	r6, [pc, #48]	; (8000e8c <__libc_init_array+0x38>)
 8000e5a:	4c0d      	ldr	r4, [pc, #52]	; (8000e90 <__libc_init_array+0x3c>)
 8000e5c:	1ba4      	subs	r4, r4, r6
 8000e5e:	10a4      	asrs	r4, r4, #2
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	d109      	bne.n	8000e78 <__libc_init_array+0x24>
 8000e64:	f000 f81a 	bl	8000e9c <_init>
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4e0a      	ldr	r6, [pc, #40]	; (8000e94 <__libc_init_array+0x40>)
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <__libc_init_array+0x44>)
 8000e6e:	1ba4      	subs	r4, r4, r6
 8000e70:	10a4      	asrs	r4, r4, #2
 8000e72:	42a5      	cmp	r5, r4
 8000e74:	d105      	bne.n	8000e82 <__libc_init_array+0x2e>
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e7c:	4798      	blx	r3
 8000e7e:	3501      	adds	r5, #1
 8000e80:	e7ee      	b.n	8000e60 <__libc_init_array+0xc>
 8000e82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e86:	4798      	blx	r3
 8000e88:	3501      	adds	r5, #1
 8000e8a:	e7f2      	b.n	8000e72 <__libc_init_array+0x1e>
 8000e8c:	08000ecc 	.word	0x08000ecc
 8000e90:	08000ecc 	.word	0x08000ecc
 8000e94:	08000ecc 	.word	0x08000ecc
 8000e98:	08000ed0 	.word	0x08000ed0

08000e9c <_init>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	bf00      	nop
 8000ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea2:	bc08      	pop	{r3}
 8000ea4:	469e      	mov	lr, r3
 8000ea6:	4770      	bx	lr

08000ea8 <_fini>:
 8000ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eaa:	bf00      	nop
 8000eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eae:	bc08      	pop	{r3}
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	4770      	bx	lr
