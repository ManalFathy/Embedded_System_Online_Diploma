
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000090c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a54  08000a54  00010a5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a54  08000a54  00010a5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a54  08000a5c  00010a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a54  08000a54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a58  08000a58  00010a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a5c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a5c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040ed  00000000  00000000  00010a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f0  00000000  00000000  00014b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a30  00000000  00000000  00015562  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016168  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000b17  00000000  00000000  000162e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020fa  00000000  00000000  00016df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a058  00000000  00000000  00018ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022f49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000584  00000000  00000000  00022fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a24 	.word	0x08000a24

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a24 	.word	0x08000a24

08000170 <clock_init>:
#include "lcd.h"
#include "keypad.h"

 unsigned char ch ;
void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
RCC_AFIO_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <M_UART_IRQ_Callback>:

void M_UART_IRQ_Callback(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	  MCAL_UART_ReceiveData(USART1, &ch, disable);
 800019c:	2201      	movs	r2, #1
 800019e:	4905      	ldr	r1, [pc, #20]	; (80001b4 <M_UART_IRQ_Callback+0x1c>)
 80001a0:	4805      	ldr	r0, [pc, #20]	; (80001b8 <M_UART_IRQ_Callback+0x20>)
 80001a2:	f000 fa81 	bl	80006a8 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80001a6:	2200      	movs	r2, #0
 80001a8:	4902      	ldr	r1, [pc, #8]	; (80001b4 <M_UART_IRQ_Callback+0x1c>)
 80001aa:	4803      	ldr	r0, [pc, #12]	; (80001b8 <M_UART_IRQ_Callback+0x20>)
 80001ac:	f000 fa60 	bl	8000670 <MCAL_UART_SendData>
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000020 	.word	0x20000020
 80001b8:	40013800 	.word	0x40013800

080001bc <main>:

int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
     UART_Config uartCFG ;

	clock_init();
 80001c2:	f7ff ffd5 	bl	8000170 <clock_init>

	uartCFG.BaudRate = UART_BaudRate_115200;
 80001c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001ca:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtl =UART_HwFlowCtl_NONE;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
	uartCFG.Parity = UART_Parity_NONE;
 80001d0:	2300      	movs	r3, #0
 80001d2:	737b      	strb	r3, [r7, #13]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80001d4:	2320      	movs	r3, #32
 80001d6:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_Callback = M_UART_IRQ_Callback;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <main+0x40>)
 80001da:	617b      	str	r3, [r7, #20]
	uartCFG.Payload_Length = UART_Payload_8B ;
 80001dc:	2300      	movs	r3, #0
 80001de:	733b      	strb	r3, [r7, #12]
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 80001e0:	230c      	movs	r3, #12
 80001e2:	713b      	strb	r3, [r7, #4]
	uartCFG.StopBits = UART_StopBits_1 ;
 80001e4:	2300      	movs	r3, #0
 80001e6:	73bb      	strb	r3, [r7, #14]

	MCAL_UART_INIT(USART1, &uartCFG);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <main+0x44>)
 80001ee:	f000 f99d 	bl	800052c <MCAL_UART_INIT>
	MCAL_UART_GPIO_Set_Pins(USART1) ;
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x44>)
 80001f4:	f000 fa86 	bl	8000704 <MCAL_UART_GPIO_Set_Pins>

   while(1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x3c>
 80001fa:	bf00      	nop
 80001fc:	08000199 	.word	0x08000199
 8000200:	40013800 	.word	0x40013800

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <LoopForever+0x6>)
  ldr r1, =_edata
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LoopForever+0xe>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000214:	e002      	b.n	800021c <LoopCopyDataInit>

08000216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021a:	3304      	adds	r3, #4

0800021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000220:	d3f9      	bcc.n	8000216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000224:	4c0a      	ldr	r4, [pc, #40]	; (8000250 <LoopForever+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000228:	e001      	b.n	800022e <LoopFillZerobss>

0800022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800022c:	3204      	adds	r2, #4

0800022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000230:	d3fb      	bcc.n	800022a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000232:	f000 fbd3 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000236:	f7ff ffc1 	bl	80001bc <main>

0800023a <LoopForever>:

LoopForever:
    b LoopForever
 800023a:	e7fe      	b.n	800023a <LoopForever>
  ldr   r0, =_estack
 800023c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	08000a5c 	.word	0x08000a5c
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	20000060 	.word	0x20000060

08000254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC1_2_IRQHandler>
	...

08000258 <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
//Clear pending register by writing 1
	EXTI->PR |= 1<< 0 ;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <EXTI0_IRQHandler+0x1c>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <EXTI0_IRQHandler+0x1c>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6153      	str	r3, [r2, #20]
	//Call IRQ Callback
	GP_IRQ_Callback[0]();
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <EXTI0_IRQHandler+0x20>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4798      	blx	r3
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010400 	.word	0x40010400
 8000278:	20000024 	.word	0x20000024

0800027c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 1 ;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <EXTI1_IRQHandler+0x1c>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <EXTI1_IRQHandler+0x1c>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[1]();
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <EXTI1_IRQHandler+0x20>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4798      	blx	r3
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010400 	.word	0x40010400
 800029c:	20000024 	.word	0x20000024

080002a0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 2 ;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <EXTI2_IRQHandler+0x1c>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <EXTI2_IRQHandler+0x1c>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[2]();
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <EXTI2_IRQHandler+0x20>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4798      	blx	r3
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010400 	.word	0x40010400
 80002c0:	20000024 	.word	0x20000024

080002c4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 3 ;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI3_IRQHandler+0x1c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <EXTI3_IRQHandler+0x1c>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[3]();
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <EXTI3_IRQHandler+0x20>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4798      	blx	r3
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010400 	.word	0x40010400
 80002e4:	20000024 	.word	0x20000024

080002e8 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 4 ;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI4_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI4_IRQHandler+0x1c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[4]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI4_IRQHandler+0x20>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	20000024 	.word	0x20000024

0800030c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  if(EXTI->PR & 1<<5) { EXTI->PR |= 1<< 5 ; GP_IRQ_Callback[5](); }
 8000310:	4b26      	ldr	r3, [pc, #152]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	2b00      	cmp	r3, #0
 800031a:	d008      	beq.n	800032e <EXTI9_5_IRQHandler+0x22>
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4798      	blx	r3
  if(EXTI->PR & 1<<6) { EXTI->PR |= 1<< 6 ; GP_IRQ_Callback[6](); }
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000336:	2b00      	cmp	r3, #0
 8000338:	d008      	beq.n	800034c <EXTI9_5_IRQHandler+0x40>
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4798      	blx	r3
  if(EXTI->PR & 1<<7) { EXTI->PR |= 1<< 7 ; GP_IRQ_Callback[7](); }
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000354:	2b00      	cmp	r3, #0
 8000356:	d008      	beq.n	800036a <EXTI9_5_IRQHandler+0x5e>
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800035e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000362:	6153      	str	r3, [r2, #20]
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	4798      	blx	r3
  if(EXTI->PR & 1<<8) { EXTI->PR |= 1<< 8 ; GP_IRQ_Callback[8](); }
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000372:	2b00      	cmp	r3, #0
 8000374:	d008      	beq.n	8000388 <EXTI9_5_IRQHandler+0x7c>
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 8000384:	6a1b      	ldr	r3, [r3, #32]
 8000386:	4798      	blx	r3
  if(EXTI->PR & 1<<9) { EXTI->PR |= 1<< 9 ; GP_IRQ_Callback[9](); }
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <EXTI9_5_IRQHandler+0x9a>
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800039a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039e:	6153      	str	r3, [r2, #20]
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 80003a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a4:	4798      	blx	r3
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010400 	.word	0x40010400
 80003b0:	20000024 	.word	0x20000024

080003b4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	  if(EXTI->PR & 1<<10) { EXTI->PR |= 1<< 10 ; GP_IRQ_Callback[10](); }
 80003b8:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d008      	beq.n	80003d6 <EXTI15_10_IRQHandler+0x22>
 80003c4:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a29      	ldr	r2, [pc, #164]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 80003d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d4:	4798      	blx	r3
	  if(EXTI->PR & 1<<11) { EXTI->PR |= 1<< 11 ; GP_IRQ_Callback[11](); }
 80003d6:	4b26      	ldr	r3, [pc, #152]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <EXTI15_10_IRQHandler+0x40>
 80003e2:	4b23      	ldr	r3, [pc, #140]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a22      	ldr	r2, [pc, #136]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 80003f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f2:	4798      	blx	r3
	  if(EXTI->PR & 1<<12) { EXTI->PR |= 1<< 12 ; GP_IRQ_Callback[12](); }
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <EXTI15_10_IRQHandler+0x5e>
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a1a      	ldr	r2, [pc, #104]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4798      	blx	r3
	  if(EXTI->PR & 1<<13) { EXTI->PR |= 1<< 13 ; GP_IRQ_Callback[13](); }
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d008      	beq.n	8000430 <EXTI15_10_IRQHandler+0x7c>
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a13      	ldr	r2, [pc, #76]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042e:	4798      	blx	r3
	  if(EXTI->PR & 1<<14) { EXTI->PR |= 1<< 12 ; GP_IRQ_Callback[14](); }
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000438:	2b00      	cmp	r3, #0
 800043a:	d008      	beq.n	800044e <EXTI15_10_IRQHandler+0x9a>
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000442:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 800044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800044c:	4798      	blx	r3
	  if(EXTI->PR & 1<<15) { EXTI->PR |= 1<< 13 ; GP_IRQ_Callback[15](); }
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <EXTI15_10_IRQHandler+0xb8>
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a04      	ldr	r2, [pc, #16]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 8000468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800046a:	4798      	blx	r3
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40010400 	.word	0x40010400
 8000474:	20000024 	.word	0x20000024

08000478 <MCAL_RCC_GetSYSCLK1Freq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPRrescTable[16U] = { 0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};//shift 1 right == multiply by 2
uint32_t MCAL_RCC_GetSYSCLK1Freq(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
switch((RCC->CFGR >> 2) &0b11)
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <MCAL_RCC_GetSYSCLK1Freq+0x30>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	089b      	lsrs	r3, r3, #2
 8000482:	f003 0303 	and.w	r3, r3, #3
 8000486:	2b01      	cmp	r3, #1
 8000488:	d006      	beq.n	8000498 <MCAL_RCC_GetSYSCLK1Freq+0x20>
 800048a:	2b01      	cmp	r3, #1
 800048c:	d302      	bcc.n	8000494 <MCAL_RCC_GetSYSCLK1Freq+0x1c>
 800048e:	2b02      	cmp	r3, #2
 8000490:	d004      	beq.n	800049c <MCAL_RCC_GetSYSCLK1Freq+0x24>
 8000492:	e005      	b.n	80004a0 <MCAL_RCC_GetSYSCLK1Freq+0x28>
		{
case 0:
	return HSI_RC_CLK;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MCAL_RCC_GetSYSCLK1Freq+0x34>)
 8000496:	e003      	b.n	80004a0 <MCAL_RCC_GetSYSCLK1Freq+0x28>
	break;
case 1:
	//to do need to calculate it //externel
	return HSE_CLK ;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MCAL_RCC_GetSYSCLK1Freq+0x38>)
 800049a:	e001      	b.n	80004a0 <MCAL_RCC_GetSYSCLK1Freq+0x28>
	break;
case 2:
	//to do need to calculate it
		return 16000000 ;
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <MCAL_RCC_GetSYSCLK1Freq+0x38>)
 800049e:	e7ff      	b.n	80004a0 <MCAL_RCC_GetSYSCLK1Freq+0x28>

	break;

		}
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	007a1200 	.word	0x007a1200
 80004b0:	00f42400 	.word	0x00f42400

080004b4 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_GetSYSCLK1Freq() >> AHBPRrescTable[(RCC->CFGR >> 4) &0b1111]);
 80004b8:	f7ff ffde 	bl	8000478 <MCAL_RCC_GetSYSCLK1Freq>
 80004bc:	4601      	mov	r1, r0
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <MCAL_RCC_GetHCLKFreq+0x20>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	091b      	lsrs	r3, r3, #4
 80004c4:	f003 030f 	and.w	r3, r3, #15
 80004c8:	4a03      	ldr	r2, [pc, #12]	; (80004d8 <MCAL_RCC_GetHCLKFreq+0x24>)
 80004ca:	5cd3      	ldrb	r3, [r2, r3]
 80004cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	08000a44 	.word	0x08000a44

080004dc <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPRrescTable[(RCC->CFGR >> 8) &0b111]);
 80004e0:	f7ff ffe8 	bl	80004b4 <MCAL_RCC_GetHCLKFreq>
 80004e4:	4601      	mov	r1, r0
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <MCAL_RCC_GetPCLK1Freq+0x20>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	0a1b      	lsrs	r3, r3, #8
 80004ec:	f003 0307 	and.w	r3, r3, #7
 80004f0:	4a03      	ldr	r2, [pc, #12]	; (8000500 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	08000a3c 	.word	0x08000a3c

08000504 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPRrescTable[(RCC->CFGR >> 11) &0b111]);
 8000508:	f7ff ffd4 	bl	80004b4 <MCAL_RCC_GetHCLKFreq>
 800050c:	4601      	mov	r1, r0
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	0adb      	lsrs	r3, r3, #11
 8000514:	f003 0307 	and.w	r3, r3, #7
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <MCAL_RCC_GetPCLK2Freq+0x24>)
 800051a:	5cd3      	ldrb	r3, [r2, r3]
 800051c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000520:	4618      	mov	r0, r3
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	08000a3c 	.word	0x08000a3c

0800052c <MCAL_UART_INIT>:
 * Note              -support for now ASynch mode and clock 8 HZ
 */


void MCAL_UART_INIT(USART_TypeDef * USARTx , UART_Config* UART_config)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;
	Global_UART_Config = UART_config;
 8000536:	4a48      	ldr	r2, [pc, #288]	; (8000658 <MCAL_UART_INIT+0x12c>)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	6013      	str	r3, [r2, #0]

	//enable the clock for given USART Peripheral
	if(USARTx == USART1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a47      	ldr	r2, [pc, #284]	; (800065c <MCAL_UART_INIT+0x130>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <MCAL_UART_INIT+0x26>
		RCC_USART1_CLK_EN();
 8000544:	4b46      	ldr	r3, [pc, #280]	; (8000660 <MCAL_UART_INIT+0x134>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a45      	ldr	r2, [pc, #276]	; (8000660 <MCAL_UART_INIT+0x134>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	e014      	b.n	800057c <MCAL_UART_INIT+0x50>
	else if (USARTx == USART2)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a43      	ldr	r2, [pc, #268]	; (8000664 <MCAL_UART_INIT+0x138>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <MCAL_UART_INIT+0x3c>
		RCC_USART2_CLK_EN();
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <MCAL_UART_INIT+0x134>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a40      	ldr	r2, [pc, #256]	; (8000660 <MCAL_UART_INIT+0x134>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	e009      	b.n	800057c <MCAL_UART_INIT+0x50>
	else if (USARTx == USART3)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a3f      	ldr	r2, [pc, #252]	; (8000668 <MCAL_UART_INIT+0x13c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d105      	bne.n	800057c <MCAL_UART_INIT+0x50>
		RCC_USART3_CLK_EN();
 8000570:	4b3b      	ldr	r3, [pc, #236]	; (8000660 <MCAL_UART_INIT+0x134>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a3a      	ldr	r2, [pc, #232]	; (8000660 <MCAL_UART_INIT+0x134>)
 8000576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057a:	61d3      	str	r3, [r2, #28]

	//enable UART Module
	USARTx->CR1 |= (1<<13) ; //Bit 13 UE: USART enable
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	60da      	str	r2, [r3, #12]

	//enable Mode TX RX
	USARTx->CR1 |= UART_config->USART_Mode ;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60da      	str	r2, [r3, #12]

	// enable Payload width
	USARTx->CR1 |= UART_config->Payload_Length ;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	7a12      	ldrb	r2, [r2, #8]
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]

	//Configure parity bits
	USARTx->CR1 |= UART_config->Parity ;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	7a52      	ldrb	r2, [r2, #9]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60da      	str	r2, [r3, #12]

	//configure stop bits
	USARTx->CR2 |= UART_config->StopBits;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	7a92      	ldrb	r2, [r2, #10]
 80005ba:	431a      	orrs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	611a      	str	r2, [r3, #16]

	//flow control
	USARTx->CR3 |= UART_config->HwFlowCtl ;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	7ad2      	ldrb	r2, [r2, #11]
 80005c8:	431a      	orrs	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	615a      	str	r2, [r3, #20]

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3

	if(USARTx == USART1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <MCAL_UART_INIT+0x130>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d103      	bne.n	80005de <MCAL_UART_INIT+0xb2>
		pclk = MCAL_RCC_GetPCLK2Freq();
 80005d6:	f7ff ff95 	bl	8000504 <MCAL_RCC_GetPCLK2Freq>
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	e002      	b.n	80005e4 <MCAL_UART_INIT+0xb8>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 80005de:	f7ff ff7d 	bl	80004dc <MCAL_RCC_GetPCLK1Freq>
 80005e2:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(pclk ,UART_config->BaudRate ) ;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]

	USARTx->BRR =BRR ;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	609a      	str	r2, [r3, #8]

	//enable /diable interrupt
	if(UART_config->IRQ_Enable != UART_IRQ_Enable_NONE)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	7b1b      	ldrb	r3, [r3, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d026      	beq.n	8000650 <MCAL_UART_INIT+0x124>
	{
		USARTx->CR1 |= UART_config->IRQ_Enable ;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	7b12      	ldrb	r2, [r2, #12]
 800060a:	431a      	orrs	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	60da      	str	r2, [r3, #12]

		//enable NVIC for USART IRQ
		if(USARTx == USART1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MCAL_UART_INIT+0x130>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d106      	bne.n	8000626 <MCAL_UART_INIT+0xfa>
			NVIC_IRQ37_USART1_Enable;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MCAL_UART_INIT+0x140>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <MCAL_UART_INIT+0x140>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6013      	str	r3, [r2, #0]
		else if (USARTx == USART3)
			NVIC_IRQ37_USART3_Enable;

	}

}
 8000624:	e014      	b.n	8000650 <MCAL_UART_INIT+0x124>
		else if (USARTx == USART2)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MCAL_UART_INIT+0x138>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <MCAL_UART_INIT+0x110>
			NVIC_IRQ37_USART2_Enable;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MCAL_UART_INIT+0x140>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <MCAL_UART_INIT+0x140>)
 8000634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000638:	6013      	str	r3, [r2, #0]
}
 800063a:	e009      	b.n	8000650 <MCAL_UART_INIT+0x124>
		else if (USARTx == USART3)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <MCAL_UART_INIT+0x13c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d105      	bne.n	8000650 <MCAL_UART_INIT+0x124>
			NVIC_IRQ37_USART3_Enable;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MCAL_UART_INIT+0x140>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <MCAL_UART_INIT+0x140>)
 800064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000001c 	.word	0x2000001c
 800065c:	40013800 	.word	0x40013800
 8000660:	40021000 	.word	0x40021000
 8000664:	40004400 	.word	0x40004400
 8000668:	40004800 	.word	0x40004800
 800066c:	e000e104 	.word	0xe000e104

08000670 <MCAL_UART_SendData>:
 *param[in]          -PollingEn enable or disable the polling
 * @retval           -none
 * Note              -should initialize UART firist
 */
void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t* pTxBuffer , enum Polling_mechanism PollingEn)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	4613      	mov	r3, r2
 800067c:	71fb      	strb	r3, [r7, #7]
	//wait until TXE is set
	if (PollingEn == enable)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & (1<<7))); //polling
 8000684:	bf00      	nop
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f9      	beq.n	8000686 <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = (* pTxBuffer & (uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (* pTxBuffer & (uint16_t)0xFF);
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	605a      	str	r2, [r3, #4]
	}

}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
	...

080006a8 <MCAL_UART_ReceiveData>:
 *param[in]          -PollingEn enable or disable the polling
 * @retval           -none
 * Note              -none
 */
void MCAL_UART_ReceiveData(USART_TypeDef * USARTx , uint16_t* pTxBuffer , enum Polling_mechanism PollingEn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	71fb      	strb	r3, [r7, #7]

	//wait until RXNE is set
	if (PollingEn == enable)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & (1<<5))); //polling
 80006bc:	bf00      	nop
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0320 	and.w	r3, r3, #32
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <MCAL_UART_ReceiveData+0x16>


	}
	else //8 bit data
	{
		if(Global_UART_Config->Parity == UART_Parity_NONE)
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MCAL_UART_ReceiveData+0x58>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7a5b      	ldrb	r3, [r3, #9]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d107      	bne.n	80006e4 <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity so all 9bits are data
			*((uint16_t*)pTxBuffer) = (USARTx->DR   & (uint8_t)0xFF);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	b29a      	uxth	r2, r3
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	801a      	strh	r2, [r3, #0]



	}

}
 80006e2:	e007      	b.n	80006f4 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0x7F);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	801a      	strh	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	2000001c 	.word	0x2000001c

08000704 <MCAL_UART_GPIO_Set_Pins>:
 * @retval           -none
 * Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()
 */

void MCAL_UART_GPIO_Set_Pins (USART_TypeDef * USARTx)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pincfg;
	if(USARTx == USART1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d118      	bne.n	8000746 <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9 ;
 8000714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000718:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 800071a:	2306      	movs	r3, #6
 800071c:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	4825      	ldr	r0, [pc, #148]	; (80007c0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800072a:	f000 f8d2 	bl	80008d2 <MCAL_GPIO_Init>

		//PA10 RX
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 800072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000732:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_Mode_AF_INPUT;
 8000734:	2308      	movs	r3, #8
 8000736:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4820      	ldr	r0, [pc, #128]	; (80007c0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000740:	f000 f8c7 	bl	80008d2 <MCAL_GPIO_Init>
				MCAL_GPIO_Init(GPIOA, &pincfg) ;

				}

		}
}
 8000744:	e036      	b.n	80007b4 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d116      	bne.n	800077c <MCAL_UART_GPIO_Set_Pins+0x78>
			pincfg.GPIO_PinNumber = GPIO_PIN_2 ;
 800074e:	2304      	movs	r3, #4
 8000750:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 8000752:	2306      	movs	r3, #6
 8000754:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4619      	mov	r1, r3
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000762:	f000 f8b6 	bl	80008d2 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000766:	2308      	movs	r3, #8
 8000768:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_AF_INPUT;
 800076a:	2308      	movs	r3, #8
 800076c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000776:	f000 f8ac 	bl	80008d2 <MCAL_GPIO_Init>
}
 800077a:	e01b      	b.n	80007b4 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d117      	bne.n	80007b4 <MCAL_UART_GPIO_Set_Pins+0xb0>
			pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_OUTPUT_AF_PP;
 800078a:	2306      	movs	r3, #6
 800078c:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_output_speed = GPIO_output_speed_10M;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MCAL_UART_GPIO_Set_Pins+0xc8>)
 800079a:	f000 f89a 	bl	80008d2 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_11 ;
 800079e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a2:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Mode = GPIO_Mode_AF_INPUT;
 80007a4:	2308      	movs	r3, #8
 80007a6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80007b0:	f000 f88f 	bl	80008d2 <MCAL_GPIO_Init>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40010800 	.word	0x40010800
 80007c4:	40004400 	.word	0x40004400
 80007c8:	40004800 	.word	0x40004800
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <USART1_IRQHandler+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	4798      	blx	r3
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000001c 	.word	0x2000001c

080007e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <USART2_IRQHandler+0x10>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	4798      	blx	r3
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000001c 	.word	0x2000001c

080007f8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <USART3_IRQHandler+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	4798      	blx	r3
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000001c 	.word	0x2000001c

0800080c <Get_CRLH_Position>:


#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2b80      	cmp	r3, #128	; 0x80
 800081a:	d042      	beq.n	80008a2 <Get_CRLH_Position+0x96>
 800081c:	2b80      	cmp	r3, #128	; 0x80
 800081e:	dc11      	bgt.n	8000844 <Get_CRLH_Position+0x38>
 8000820:	2b08      	cmp	r3, #8
 8000822:	d036      	beq.n	8000892 <Get_CRLH_Position+0x86>
 8000824:	2b08      	cmp	r3, #8
 8000826:	dc06      	bgt.n	8000836 <Get_CRLH_Position+0x2a>
 8000828:	2b02      	cmp	r3, #2
 800082a:	d02e      	beq.n	800088a <Get_CRLH_Position+0x7e>
 800082c:	2b04      	cmp	r3, #4
 800082e:	d02e      	beq.n	800088e <Get_CRLH_Position+0x82>
 8000830:	2b01      	cmp	r3, #1
 8000832:	d028      	beq.n	8000886 <Get_CRLH_Position+0x7a>
 8000834:	e047      	b.n	80008c6 <Get_CRLH_Position+0xba>
 8000836:	2b20      	cmp	r3, #32
 8000838:	d02f      	beq.n	800089a <Get_CRLH_Position+0x8e>
 800083a:	2b40      	cmp	r3, #64	; 0x40
 800083c:	d02f      	beq.n	800089e <Get_CRLH_Position+0x92>
 800083e:	2b10      	cmp	r3, #16
 8000840:	d029      	beq.n	8000896 <Get_CRLH_Position+0x8a>
 8000842:	e040      	b.n	80008c6 <Get_CRLH_Position+0xba>
 8000844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000848:	d033      	beq.n	80008b2 <Get_CRLH_Position+0xa6>
 800084a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800084e:	dc09      	bgt.n	8000864 <Get_CRLH_Position+0x58>
 8000850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000854:	d029      	beq.n	80008aa <Get_CRLH_Position+0x9e>
 8000856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800085a:	d028      	beq.n	80008ae <Get_CRLH_Position+0xa2>
 800085c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000860:	d021      	beq.n	80008a6 <Get_CRLH_Position+0x9a>
 8000862:	e030      	b.n	80008c6 <Get_CRLH_Position+0xba>
 8000864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000868:	d027      	beq.n	80008ba <Get_CRLH_Position+0xae>
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086e:	dc03      	bgt.n	8000878 <Get_CRLH_Position+0x6c>
 8000870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000874:	d01f      	beq.n	80008b6 <Get_CRLH_Position+0xaa>
 8000876:	e026      	b.n	80008c6 <Get_CRLH_Position+0xba>
 8000878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800087c:	d01f      	beq.n	80008be <Get_CRLH_Position+0xb2>
 800087e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000882:	d01e      	beq.n	80008c2 <Get_CRLH_Position+0xb6>
 8000884:	e01f      	b.n	80008c6 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 8000886:	2300      	movs	r3, #0
 8000888:	e01e      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 800088a:	2304      	movs	r3, #4
 800088c:	e01c      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 800088e:	2308      	movs	r3, #8
 8000890:	e01a      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8000892:	230c      	movs	r3, #12
 8000894:	e018      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8000896:	2310      	movs	r3, #16
 8000898:	e016      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 800089a:	2314      	movs	r3, #20
 800089c:	e014      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 800089e:	2318      	movs	r3, #24
 80008a0:	e012      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 80008a2:	231c      	movs	r3, #28
 80008a4:	e010      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e00e      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 80008aa:	2304      	movs	r3, #4
 80008ac:	e00c      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 80008ae:	2308      	movs	r3, #8
 80008b0:	e00a      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 80008b2:	230c      	movs	r3, #12
 80008b4:	e008      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 80008b6:	2310      	movs	r3, #16
 80008b8:	e006      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 80008ba:	2314      	movs	r3, #20
 80008bc:	e004      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 80008be:	2318      	movs	r3, #24
 80008c0:	e002      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 80008c2:	231c      	movs	r3, #28
 80008c4:	e000      	b.n	80008c8 <Get_CRLH_Position+0xbc>
		break ;
	}
	return 0 ;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <MCAL_GPIO_Init>:
 * Note              -stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 *                     But LQFP48 package has only GPIO A,B,part of C,D exported as external pins from thw MCU
 */

void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* Pinconfig)
{
 80008d2:	b590      	push	{r4, r7, lr}
 80008d4:	b085      	sub	sp, #20
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* configregister = NULL ;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
	configregister = (Pinconfig ->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d801      	bhi.n	80008f0 <MCAL_GPIO_Init+0x1e>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	e001      	b.n	80008f4 <MCAL_GPIO_Init+0x22>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3304      	adds	r3, #4
 80008f4:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(Pinconfig->GPIO_PinNumber)) ;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff86 	bl	800080c <Get_CRLH_Position>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	230f      	movs	r3, #15
 8000906:	4093      	lsls	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	401a      	ands	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	601a      	str	r2, [r3, #0]

	//if pin is output
	if ( (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_PP) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_PP) )
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	2b07      	cmp	r3, #7
 800091a:	d00b      	beq.n	8000934 <MCAL_GPIO_Init+0x62>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	2b06      	cmp	r3, #6
 8000922:	d007      	beq.n	8000934 <MCAL_GPIO_Init+0x62>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	2b05      	cmp	r3, #5
 800092a:	d003      	beq.n	8000934 <MCAL_GPIO_Init+0x62>
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	2b04      	cmp	r3, #4
 8000932:	d10e      	bne.n	8000952 <MCAL_GPIO_Init+0x80>
	{
		pin_config =  ((((Pinconfig->GPIO_Mode -4) << 2) | Pinconfig->GPIO_output_speed) & 0x0f );
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	3b04      	subs	r3, #4
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	b25a      	sxtb	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	78db      	ldrb	r3, [r3, #3]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b25b      	sxtb	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e031      	b.n	80009b6 <MCAL_GPIO_Init+0xe4>
	//if pin is input
	else
	{
		// MODE = 00: Input mode (reset state)

		if ( (Pinconfig->GPIO_Mode == GPIO_Mode_Analog) || (Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_FLO ))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	789b      	ldrb	r3, [r3, #2]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <MCAL_GPIO_Init+0x90>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	789b      	ldrb	r3, [r3, #2]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d107      	bne.n	8000972 <MCAL_GPIO_Init+0xa0>
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	789b      	ldrb	r3, [r3, #2]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e021      	b.n	80009b6 <MCAL_GPIO_Init+0xe4>

		}
		else if (Pinconfig->GPIO_Mode == GPIO_Mode_AF_INPUT) //consider it as input floating
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b08      	cmp	r3, #8
 8000978:	d102      	bne.n	8000980 <MCAL_GPIO_Init+0xae>
		{
			pin_config =  ((((GPIO_Mode_INPUT_FLO) << 2) | 0x0) & 0x0f );
 800097a:	2304      	movs	r3, #4
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	e01a      	b.n	80009b6 <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD Input
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 030f 	and.w	r3, r3, #15
 800098c:	73fb      	strb	r3, [r7, #15]
			if(Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_PU)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d107      	bne.n	80009a6 <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= Pinconfig->GPIO_PinNumber ;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	e007      	b.n	80009b6 <MCAL_GPIO_Init+0xe4>
			}
			else //PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~ (Pinconfig->GPIO_PinNumber) ;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	8812      	ldrh	r2, [r2, #0]
 80009ae:	43d2      	mvns	r2, r2
 80009b0:	401a      	ands	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60da      	str	r2, [r3, #12]
		}

	}
	//write on CRL OR CRH

	(*configregister) |= ( (pin_config) << Get_CRLH_Position(Pinconfig->GPIO_PinNumber) );
 80009b6:	7bfc      	ldrb	r4, [r7, #15]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff25 	bl	800080c <Get_CRLH_Position>
 80009c2:	4603      	mov	r3, r0
 80009c4:	fa04 f203 	lsl.w	r2, r4, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	601a      	str	r2, [r3, #0]

}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd90      	pop	{r4, r7, pc}
	...

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	2500      	movs	r5, #0
 80009e0:	4e0c      	ldr	r6, [pc, #48]	; (8000a14 <__libc_init_array+0x38>)
 80009e2:	4c0d      	ldr	r4, [pc, #52]	; (8000a18 <__libc_init_array+0x3c>)
 80009e4:	1ba4      	subs	r4, r4, r6
 80009e6:	10a4      	asrs	r4, r4, #2
 80009e8:	42a5      	cmp	r5, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	f000 f81a 	bl	8000a24 <_init>
 80009f0:	2500      	movs	r5, #0
 80009f2:	4e0a      	ldr	r6, [pc, #40]	; (8000a1c <__libc_init_array+0x40>)
 80009f4:	4c0a      	ldr	r4, [pc, #40]	; (8000a20 <__libc_init_array+0x44>)
 80009f6:	1ba4      	subs	r4, r4, r6
 80009f8:	10a4      	asrs	r4, r4, #2
 80009fa:	42a5      	cmp	r5, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a04:	4798      	blx	r3
 8000a06:	3501      	adds	r5, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a0e:	4798      	blx	r3
 8000a10:	3501      	adds	r5, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	08000a54 	.word	0x08000a54
 8000a18:	08000a54 	.word	0x08000a54
 8000a1c:	08000a54 	.word	0x08000a54
 8000a20:	08000a58 	.word	0x08000a58

08000a24 <_init>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr

08000a30 <_fini>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	bf00      	nop
 8000a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	469e      	mov	lr, r3
 8000a3a:	4770      	bx	lr
