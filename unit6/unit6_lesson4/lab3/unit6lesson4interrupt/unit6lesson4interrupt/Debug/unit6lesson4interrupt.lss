
unit6lesson4interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000164  00000164  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000003a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000038  000000a6  000000a6  0000011a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000038  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_3 00000038  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000016e  0000016e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_2>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_3>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:

	//PORTB PB2 INT2 input direction
	//DDRB  &= ~(1<<2);

	//PORTD PD5 PD6 PD7 output direction for leds
	DDRD  |= (0b111<<5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17


	//enable global irq
	//SREG |= (1<<7);
	sei();
  72:	78 94       	sei

	//set general interrupt control register to enable INT0 INT1 INT2
	GICR |= (0b111<<5);
  74:	8b b7       	in	r24, 0x3b	; 59
  76:	80 6e       	ori	r24, 0xE0	; 224
  78:	8b bf       	out	0x3b, r24	; 59

	//the logical change trigger for INT0
	//	Any logical change generates an interrupt request
	MCUCR |= (1<<0);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<1);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	8d 7f       	andi	r24, 0xFD	; 253
  84:	85 bf       	out	0x35, r24	; 53

	//the logical change trigger for INT1
	//a rising edge generates an interrupt request
	MCUCR |= (0b11<<2);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	8c 60       	ori	r24, 0x0C	; 12
  8a:	85 bf       	out	0x35, r24	; 53

	//the logical change trigger for INT2
	//a falling edge generates an interrupt request
	MCUCSR &= ~(1<<6);
  8c:	84 b7       	in	r24, 0x34	; 52
  8e:	8f 7b       	andi	r24, 0xBF	; 191
  90:	84 bf       	out	0x34, r24	; 52


	while(1)
	{
		PORTD &= ~(1<<5);
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 7d       	andi	r24, 0xDF	; 223
  96:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<6);
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<7);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	f6 cf       	rjmp	.-20     	; 0x92 <main+0x26>

Disassembly of section .text.__vector_1:

000000a6 <__vector_1>:
		
	}
}

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	//toggle led
	PORTD |=(1<<5);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	9c e0       	ldi	r25, 0x0C	; 12
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__vector_1+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__vector_1+0x26>
  cc:	00 00       	nop
	_delay_ms(500);
	
	//GIFR |=(1<<6);
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

Disassembly of section .text.__vector_2:

000000de <__vector_2>:
ISR(INT1_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	PORTD |=(1<<6);
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	84 e3       	ldi	r24, 0x34	; 52
  f8:	9c e0       	ldi	r25, 0x0C	; 12
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <__vector_2+0x1c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__vector_2+0x26>
 104:	00 00       	nop
	_delay_ms(500);

	//GIFR |=(1<<7);
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

Disassembly of section .text.__vector_3:

00000116 <__vector_3>:
ISR(INT2_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	PORTD |=(1<<7);
 126:	82 b3       	in	r24, 0x12	; 18
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	84 e3       	ldi	r24, 0x34	; 52
 130:	9c e0       	ldi	r25, 0x0C	; 12
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_3+0x1c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_3+0x26>
 13c:	00 00       	nop
	_delay_ms(500);
	
	//GIFR |=(1<<5);
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000016c <_fini>:
 16c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000016e <__funcs_on_exit>:
 16e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000170 <__simulator_exit>:
 170:	08 95       	ret

Disassembly of section .text.exit:

0000014e <exit>:
 14e:	ec 01       	movw	r28, r24
 150:	0e 94 b7 00 	call	0x16e	; 0x16e <__funcs_on_exit>
 154:	0e 94 b6 00 	call	0x16c	; 0x16c <_fini>
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 b8 00 	call	0x170	; 0x170 <__simulator_exit>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 b4 00 	call	0x168	; 0x168 <_Exit>

Disassembly of section .text._Exit:

00000168 <_Exit>:
 168:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
