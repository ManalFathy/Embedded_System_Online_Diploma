
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ae0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c44  08000c44  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c44  08000c44  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c44  08000c44  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c44  08000c44  00010c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c48  08000c48  00010c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c6c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c6c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030c3  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007ee  00000000  00000000  0002310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000074c  00000000  00000000  000238fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00024048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024198  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f98  00000000  00000000  000242a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001ab9  00000000  00000000  00026238  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007b52  00000000  00000000  00027cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f843  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e4  00000000  00000000  0002f8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bf8 	.word	0x08000bf8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bf8 	.word	0x08000bf8

08000170 <clock_init>:
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable GPIOA clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//enable GPIOB clock
	RCC_GPIOB_CLK_EN() ;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fc3c 	bl	8000a2e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fc30 	bl	8000a2e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fc24 	bl	8000a2e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fc18 	bl	8000a2e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fc0c 	bl	8000a2e <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fc00 	bl	8000a2e <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed= GPIO_output_speed_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fbf4 	bl	8000a2e <MCAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <my_wait>:

void my_wait(int x)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0 ; i<x ; i++);
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e002      	b.n	8000268 <my_wait+0x14>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3301      	adds	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	429a      	cmp	r2, r3
 800026e:	d3f8      	bcc.n	8000262 <my_wait+0xe>
	for(j=0 ;j<255 ; j++);
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	e002      	b.n	800027c <my_wait+0x28>
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	3301      	adds	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	2bfe      	cmp	r3, #254	; 0xfe
 8000280:	d9f9      	bls.n	8000276 <my_wait+0x22>
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <main>:

int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
	unsigned char key_pressed;

	clock_init();
 8000292:	f7ff ff6d 	bl	8000170 <clock_init>

	LCD_INIT();
 8000296:	f000 fa0d 	bl	80006b4 <LCD_INIT>

	LCD_WRITE_STRING("Hey there");
 800029a:	482f      	ldr	r0, [pc, #188]	; (8000358 <main+0xcc>)
 800029c:	f000 fb38 	bl	8000910 <LCD_WRITE_STRING>
	my_wait(500);
 80002a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a4:	f7ff ffd6 	bl	8000254 <my_wait>
	LCD_clear_screen();
 80002a8:	f000 f9e6 	bl	8000678 <LCD_clear_screen>
	GPIO_init();
 80002ac:	f7ff ff74 	bl	8000198 <GPIO_init>

	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <main+0xd0>)
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b8:	c303      	stmia	r3!, {r0, r1}
 80002ba:	801a      	strh	r2, [r3, #0]
 80002bc:	3302      	adds	r3, #2
 80002be:	0c12      	lsrs	r2, r2, #16
 80002c0:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 80002c2:	4a27      	ldr	r2, [pc, #156]	; (8000360 <main+0xd4>)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c8:	c303      	stmia	r3!, {r0, r1}
 80002ca:	801a      	strh	r2, [r3, #0]
 80002cc:	3302      	adds	r3, #2
 80002ce:	0c12      	lsrs	r2, r2, #16
 80002d0:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 80002d2:	2300      	movs	r3, #0
 80002d4:	77fb      	strb	r3, [r7, #31]
 80002d6:	e01b      	b.n	8000310 <main+0x84>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 80002d8:	7ffb      	ldrb	r3, [r7, #31]
 80002da:	f107 0220 	add.w	r2, r7, #32
 80002de:	4413      	add	r3, r2
 80002e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 facd 	bl	8000884 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePORT(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 80002ea:	7ffb      	ldrb	r3, [r7, #31]
 80002ec:	f107 0220 	add.w	r2, r7, #32
 80002f0:	4413      	add	r3, r2
 80002f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	4819      	ldr	r0, [pc, #100]	; (8000364 <main+0xd8>)
 8000300:	f000 fc47 	bl	8000b92 <MCAL_GPIO_WritePORT>
		my_wait(100);
 8000304:	2064      	movs	r0, #100	; 0x64
 8000306:	f7ff ffa5 	bl	8000254 <my_wait>
	for (unsigned char i = 0; i < 11; i++) {
 800030a:	7ffb      	ldrb	r3, [r7, #31]
 800030c:	3301      	adds	r3, #1
 800030e:	77fb      	strb	r3, [r7, #31]
 8000310:	7ffb      	ldrb	r3, [r7, #31]
 8000312:	2b0a      	cmp	r3, #10
 8000314:	d9e0      	bls.n	80002d8 <main+0x4c>
		/* wait for 1 second */
	}
	LCD_clear_screen();
 8000316:	f000 f9af 	bl	8000678 <LCD_clear_screen>
	Keypad_init();
 800031a:	f000 f851 	bl	80003c0 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 800031e:	4812      	ldr	r0, [pc, #72]	; (8000368 <main+0xdc>)
 8000320:	f000 faf6 	bl	8000910 <LCD_WRITE_STRING>
	my_wait(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f7ff ff95 	bl	8000254 <my_wait>
	LCD_clear_screen();
 800032a:	f000 f9a5 	bl	8000678 <LCD_clear_screen>

	while (1) {

		key_pressed = Keypad_getkey();
 800032e:	f000 f8bd 	bl	80004ac <Keypad_getkey>
 8000332:	4603      	mov	r3, r0
 8000334:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000336:	7fbb      	ldrb	r3, [r7, #30]
 8000338:	2b3f      	cmp	r3, #63	; 0x3f
 800033a:	d002      	beq.n	8000342 <main+0xb6>
 800033c:	2b41      	cmp	r3, #65	; 0x41
 800033e:	d008      	beq.n	8000352 <main+0xc6>
 8000340:	e002      	b.n	8000348 <main+0xbc>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000342:	f000 f999 	bl	8000678 <LCD_clear_screen>
			break;
 8000346:	e005      	b.n	8000354 <main+0xc8>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000348:	7fbb      	ldrb	r3, [r7, #30]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fa9a 	bl	8000884 <LCD_WRITE_CHAR>
			break;
 8000350:	e000      	b.n	8000354 <main+0xc8>
			break;
 8000352:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000354:	e7eb      	b.n	800032e <main+0xa2>
 8000356:	bf00      	nop
 8000358:	08000c10 	.word	0x08000c10
 800035c:	08000c2c 	.word	0x08000c2c
 8000360:	08000c38 	.word	0x08000c38
 8000364:	40010c00 	.word	0x40010c00
 8000368:	08000c1c 	.word	0x08000c1c

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 fc09 	bl	8000bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ff75 	bl	800028c <main>

080003a2 <LoopForever>:

LoopForever:
    b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003b0:	08000c4c 	.word	0x08000c4c
  ldr r2, =_sbss
 80003b4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003b8:	20000040 	.word	0x20000040

080003bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>
	...

080003c0 <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	//DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3)); //input
	// 	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3)); //output
	pinconfig.GPIO_PinNumber = R0;
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <Keypad_init+0xe4>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80003ca:	4b36      	ldr	r3, [pc, #216]	; (80004a4 <Keypad_init+0xe4>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80003d0:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <Keypad_init+0xe4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 80003d6:	4933      	ldr	r1, [pc, #204]	; (80004a4 <Keypad_init+0xe4>)
 80003d8:	4833      	ldr	r0, [pc, #204]	; (80004a8 <Keypad_init+0xe8>)
 80003da:	f000 fb28 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = R1;
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <Keypad_init+0xe4>)
 80003e0:	2202      	movs	r2, #2
 80003e2:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80003e4:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <Keypad_init+0xe4>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80003ea:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <Keypad_init+0xe4>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 80003f0:	492c      	ldr	r1, [pc, #176]	; (80004a4 <Keypad_init+0xe4>)
 80003f2:	482d      	ldr	r0, [pc, #180]	; (80004a8 <Keypad_init+0xe8>)
 80003f4:	f000 fb1b 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = R2;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <Keypad_init+0xe4>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <Keypad_init+0xe4>)
 8000400:	2204      	movs	r2, #4
 8000402:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <Keypad_init+0xe4>)
 8000406:	2201      	movs	r2, #1
 8000408:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 800040a:	4926      	ldr	r1, [pc, #152]	; (80004a4 <Keypad_init+0xe4>)
 800040c:	4826      	ldr	r0, [pc, #152]	; (80004a8 <Keypad_init+0xe8>)
 800040e:	f000 fb0e 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = R3;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <Keypad_init+0xe4>)
 8000414:	2210      	movs	r2, #16
 8000416:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000418:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <Keypad_init+0xe4>)
 800041a:	2204      	movs	r2, #4
 800041c:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <Keypad_init+0xe4>)
 8000420:	2201      	movs	r2, #1
 8000422:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 8000424:	491f      	ldr	r1, [pc, #124]	; (80004a4 <Keypad_init+0xe4>)
 8000426:	4820      	ldr	r0, [pc, #128]	; (80004a8 <Keypad_init+0xe8>)
 8000428:	f000 fb01 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = C0;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <Keypad_init+0xe4>)
 800042e:	2220      	movs	r2, #32
 8000430:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <Keypad_init+0xe4>)
 8000434:	2204      	movs	r2, #4
 8000436:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <Keypad_init+0xe4>)
 800043a:	2201      	movs	r2, #1
 800043c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 800043e:	4919      	ldr	r1, [pc, #100]	; (80004a4 <Keypad_init+0xe4>)
 8000440:	4819      	ldr	r0, [pc, #100]	; (80004a8 <Keypad_init+0xe8>)
 8000442:	f000 faf4 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = C1;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <Keypad_init+0xe4>)
 8000448:	2240      	movs	r2, #64	; 0x40
 800044a:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <Keypad_init+0xe4>)
 800044e:	2204      	movs	r2, #4
 8000450:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <Keypad_init+0xe4>)
 8000454:	2201      	movs	r2, #1
 8000456:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 8000458:	4912      	ldr	r1, [pc, #72]	; (80004a4 <Keypad_init+0xe4>)
 800045a:	4813      	ldr	r0, [pc, #76]	; (80004a8 <Keypad_init+0xe8>)
 800045c:	f000 fae7 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = C2;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <Keypad_init+0xe4>)
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <Keypad_init+0xe4>)
 8000468:	2204      	movs	r2, #4
 800046a:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <Keypad_init+0xe4>)
 800046e:	2201      	movs	r2, #1
 8000470:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 8000472:	490c      	ldr	r1, [pc, #48]	; (80004a4 <Keypad_init+0xe4>)
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <Keypad_init+0xe8>)
 8000476:	f000 fada 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = C3;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <Keypad_init+0xe4>)
 800047c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000480:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <Keypad_init+0xe4>)
 8000484:	2204      	movs	r2, #4
 8000486:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <Keypad_init+0xe4>)
 800048a:	2201      	movs	r2, #1
 800048c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT , &pinconfig);
 800048e:	4905      	ldr	r1, [pc, #20]	; (80004a4 <Keypad_init+0xe4>)
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <Keypad_init+0xe8>)
 8000492:	f000 facc 	bl	8000a2e <MCAL_GPIO_Init>

	//KEYPAD_PORT = 0xFF;
	MCAL_GPIO_WritePORT(KEYPAD_PORT, 0xFF);
 8000496:	21ff      	movs	r1, #255	; 0xff
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <Keypad_init+0xe8>)
 800049a:	f000 fb7a 	bl	8000b92 <MCAL_GPIO_WritePORT>

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000003c 	.word	0x2000003c
 80004a8:	40010c00 	.word	0x40010c00

080004ac <Keypad_getkey>:

char Keypad_getkey(){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e0b4      	b.n	8000622 <Keypad_getkey+0x176>
		//KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		//KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET) ;
 80004b8:	4b5e      	ldr	r3, [pc, #376]	; (8000634 <Keypad_getkey+0x188>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	485d      	ldr	r0, [pc, #372]	; (8000638 <Keypad_getkey+0x18c>)
 80004c4:	f000 fb4e 	bl	8000b64 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET) ;
 80004c8:	4b5a      	ldr	r3, [pc, #360]	; (8000634 <Keypad_getkey+0x188>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4859      	ldr	r0, [pc, #356]	; (8000638 <Keypad_getkey+0x18c>)
 80004d4:	f000 fb46 	bl	8000b64 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET) ;
 80004d8:	4b56      	ldr	r3, [pc, #344]	; (8000634 <Keypad_getkey+0x188>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	4855      	ldr	r0, [pc, #340]	; (8000638 <Keypad_getkey+0x18c>)
 80004e4:	f000 fb3e 	bl	8000b64 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET) ;
 80004e8:	4b52      	ldr	r3, [pc, #328]	; (8000634 <Keypad_getkey+0x188>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	4851      	ldr	r0, [pc, #324]	; (8000638 <Keypad_getkey+0x18c>)
 80004f4:	f000 fb36 	bl	8000b64 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET) ;
 80004f8:	4a4e      	ldr	r2, [pc, #312]	; (8000634 <Keypad_getkey+0x188>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000500:	b29b      	uxth	r3, r3
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	484c      	ldr	r0, [pc, #304]	; (8000638 <Keypad_getkey+0x18c>)
 8000508:	f000 fb2c 	bl	8000b64 <MCAL_GPIO_WritePin>

		for(j = 0; j < 4; j++){
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e080      	b.n	8000614 <Keypad_getkey+0x168>
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 8000512:	4a4a      	ldr	r2, [pc, #296]	; (800063c <Keypad_getkey+0x190>)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	4846      	ldr	r0, [pc, #280]	; (8000638 <Keypad_getkey+0x18c>)
 8000520:	f000 fb09 	bl	8000b36 <MCAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d171      	bne.n	800060e <Keypad_getkey+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0);
 800052a:	bf00      	nop
 800052c:	4a43      	ldr	r2, [pc, #268]	; (800063c <Keypad_getkey+0x190>)
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000534:	b29b      	uxth	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	483f      	ldr	r0, [pc, #252]	; (8000638 <Keypad_getkey+0x18c>)
 800053a:	f000 fafc 	bl	8000b36 <MCAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f3      	beq.n	800052c <Keypad_getkey+0x80>
				switch(i){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d861      	bhi.n	800060e <Keypad_getkey+0x162>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <Keypad_getkey+0xa4>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000561 	.word	0x08000561
 8000554:	08000589 	.word	0x08000589
 8000558:	080005b1 	.word	0x080005b1
 800055c:	080005d9 	.word	0x080005d9
				case (0):
							if (j == 0) return '7';
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d101      	bne.n	800056a <Keypad_getkey+0xbe>
 8000566:	2337      	movs	r3, #55	; 0x37
 8000568:	e060      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 1) return '4';
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d101      	bne.n	8000574 <Keypad_getkey+0xc8>
 8000570:	2334      	movs	r3, #52	; 0x34
 8000572:	e05b      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 2) return '1';
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d101      	bne.n	800057e <Keypad_getkey+0xd2>
 800057a:	2331      	movs	r3, #49	; 0x31
 800057c:	e056      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 3) return '?';
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d13d      	bne.n	8000600 <Keypad_getkey+0x154>
 8000584:	233f      	movs	r3, #63	; 0x3f
 8000586:	e051      	b.n	800062c <Keypad_getkey+0x180>
				break;
				case (1):
							if (j == 0) return '8';
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <Keypad_getkey+0xe6>
 800058e:	2338      	movs	r3, #56	; 0x38
 8000590:	e04c      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 1) return '5';
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d101      	bne.n	800059c <Keypad_getkey+0xf0>
 8000598:	2335      	movs	r3, #53	; 0x35
 800059a:	e047      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 2) return '2';
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d101      	bne.n	80005a6 <Keypad_getkey+0xfa>
 80005a2:	2332      	movs	r3, #50	; 0x32
 80005a4:	e042      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 3) return '0';
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d12b      	bne.n	8000604 <Keypad_getkey+0x158>
 80005ac:	2330      	movs	r3, #48	; 0x30
 80005ae:	e03d      	b.n	800062c <Keypad_getkey+0x180>
				break;
				case (2):
							if (j == 0) return '9';
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <Keypad_getkey+0x10e>
 80005b6:	2339      	movs	r3, #57	; 0x39
 80005b8:	e038      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 1) return '6';
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <Keypad_getkey+0x118>
 80005c0:	2336      	movs	r3, #54	; 0x36
 80005c2:	e033      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 2) return '3';
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d101      	bne.n	80005ce <Keypad_getkey+0x122>
 80005ca:	2333      	movs	r3, #51	; 0x33
 80005cc:	e02e      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 3) return '=';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d119      	bne.n	8000608 <Keypad_getkey+0x15c>
 80005d4:	233d      	movs	r3, #61	; 0x3d
 80005d6:	e029      	b.n	800062c <Keypad_getkey+0x180>
				break;
				case (3):
							if (j == 0) return '/';
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <Keypad_getkey+0x136>
 80005de:	232f      	movs	r3, #47	; 0x2f
 80005e0:	e024      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 1) return '*';
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d101      	bne.n	80005ec <Keypad_getkey+0x140>
 80005e8:	232a      	movs	r3, #42	; 0x2a
 80005ea:	e01f      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 2) return '-';
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d101      	bne.n	80005f6 <Keypad_getkey+0x14a>
 80005f2:	232d      	movs	r3, #45	; 0x2d
 80005f4:	e01a      	b.n	800062c <Keypad_getkey+0x180>
							else if (j == 3) return '+';
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d107      	bne.n	800060c <Keypad_getkey+0x160>
 80005fc:	232b      	movs	r3, #43	; 0x2b
 80005fe:	e015      	b.n	800062c <Keypad_getkey+0x180>
				break;
 8000600:	bf00      	nop
 8000602:	e004      	b.n	800060e <Keypad_getkey+0x162>
				break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <Keypad_getkey+0x162>
				break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <Keypad_getkey+0x162>
				break;
 800060c:	bf00      	nop
		for(j = 0; j < 4; j++){
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b03      	cmp	r3, #3
 8000618:	f77f af7b 	ble.w	8000512 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b03      	cmp	r3, #3
 8000626:	f77f af47 	ble.w	80004b8 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 800062a:	2341      	movs	r3, #65	; 0x41
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000010 	.word	0x20000010
 8000638:	40010c00 	.word	0x40010c00
 800063c:	20000000 	.word	0x20000000

08000640 <_delay_ms>:
 *  Author: Manal 
 */ 
#include "lcd.h"

void _delay_ms(int x)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0 ; i<x ; i++);
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <_delay_ms+0x14>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f8      	bcc.n	800064e <_delay_ms+0xe>
	for(j=0 ;j<255 ; j++);
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e002      	b.n	8000668 <_delay_ms+0x28>
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3301      	adds	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2bfe      	cmp	r3, #254	; 0xfe
 800066c:	d9f9      	bls.n	8000662 <_delay_ms+0x22>
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <LCD_clear_screen>:

void LCD_clear_screen(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f8df 	bl	8000840 <LCD_WRITE_COMMAND>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <LCD_kick>:
void LCD_kick(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	//LCD_CTRL |= (1 << ENABLE_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_SET) ;
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <LCD_kick+0x28>)
 8000694:	f000 fa66 	bl	8000b64 <MCAL_GPIO_WritePin>
	_delay_ms(50);
 8000698:	2032      	movs	r0, #50	; 0x32
 800069a:	f7ff ffd1 	bl	8000640 <_delay_ms>
//	LCD_CTRL &= ~(1 << ENABLE_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET) ;
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <LCD_kick+0x28>)
 80006a6:	f000 fa5d 	bl	8000b64 <MCAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010800 	.word	0x40010800

080006b4 <LCD_INIT>:
	//LCD_CTRL &= ~(1<<RW_SWITCH); //write
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
}

void LCD_INIT()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	_delay_ms(20);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f7ff ffc1 	bl	8000640 <_delay_ms>
	//	DataDIR_LCD_CTRL |= (1<<ENABLE_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	//	LCD_CTRL &= ~ (1<<ENABLE_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);


	// ENABLE_SWITCH , RS_SWITCH ,RW_SWITCH  input HighZ floating input
	pinconfig.GPIO_PinNumber = ENABLE_SWITCH;
 80006be:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <LCD_INIT+0x184>)
 80006c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c4:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80006c6:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <LCD_INIT+0x184>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80006cc:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <LCD_INIT+0x184>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80006d2:	4959      	ldr	r1, [pc, #356]	; (8000838 <LCD_INIT+0x184>)
 80006d4:	4859      	ldr	r0, [pc, #356]	; (800083c <LCD_INIT+0x188>)
 80006d6:	f000 f9aa 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = RS_SWITCH;
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <LCD_INIT+0x184>)
 80006dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e0:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <LCD_INIT+0x184>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80006e8:	4b53      	ldr	r3, [pc, #332]	; (8000838 <LCD_INIT+0x184>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80006ee:	4952      	ldr	r1, [pc, #328]	; (8000838 <LCD_INIT+0x184>)
 80006f0:	4852      	ldr	r0, [pc, #328]	; (800083c <LCD_INIT+0x188>)
 80006f2:	f000 f99c 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = RW_SWITCH;
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <LCD_INIT+0x184>)
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80006fe:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <LCD_INIT+0x184>)
 8000700:	2204      	movs	r2, #4
 8000702:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <LCD_INIT+0x184>)
 8000706:	2201      	movs	r2, #1
 8000708:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800070a:	494b      	ldr	r1, [pc, #300]	; (8000838 <LCD_INIT+0x184>)
 800070c:	484b      	ldr	r0, [pc, #300]	; (800083c <LCD_INIT+0x188>)
 800070e:	f000 f98e 	bl	8000a2e <MCAL_GPIO_Init>


	//DataDIR_LCD_PORT =0xFF;data in output direction
	_delay_ms(15);
 8000712:	200f      	movs	r0, #15
 8000714:	f7ff ff94 	bl	8000640 <_delay_ms>
	//data pins output with speed 10MHZ

	pinconfig.GPIO_PinNumber = GPIO_PIN_0;
 8000718:	4b47      	ldr	r3, [pc, #284]	; (8000838 <LCD_INIT+0x184>)
 800071a:	2201      	movs	r2, #1
 800071c:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 800071e:	4b46      	ldr	r3, [pc, #280]	; (8000838 <LCD_INIT+0x184>)
 8000720:	2204      	movs	r2, #4
 8000722:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000724:	4b44      	ldr	r3, [pc, #272]	; (8000838 <LCD_INIT+0x184>)
 8000726:	2201      	movs	r2, #1
 8000728:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800072a:	4943      	ldr	r1, [pc, #268]	; (8000838 <LCD_INIT+0x184>)
 800072c:	4843      	ldr	r0, [pc, #268]	; (800083c <LCD_INIT+0x188>)
 800072e:	f000 f97e 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_1;
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <LCD_INIT+0x184>)
 8000734:	2202      	movs	r2, #2
 8000736:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <LCD_INIT+0x184>)
 800073a:	2204      	movs	r2, #4
 800073c:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 800073e:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <LCD_INIT+0x184>)
 8000740:	2201      	movs	r2, #1
 8000742:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 8000744:	493c      	ldr	r1, [pc, #240]	; (8000838 <LCD_INIT+0x184>)
 8000746:	483d      	ldr	r0, [pc, #244]	; (800083c <LCD_INIT+0x188>)
 8000748:	f000 f971 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_2;
 800074c:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <LCD_INIT+0x184>)
 800074e:	2204      	movs	r2, #4
 8000750:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <LCD_INIT+0x184>)
 8000754:	2204      	movs	r2, #4
 8000756:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000758:	4b37      	ldr	r3, [pc, #220]	; (8000838 <LCD_INIT+0x184>)
 800075a:	2201      	movs	r2, #1
 800075c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800075e:	4936      	ldr	r1, [pc, #216]	; (8000838 <LCD_INIT+0x184>)
 8000760:	4836      	ldr	r0, [pc, #216]	; (800083c <LCD_INIT+0x188>)
 8000762:	f000 f964 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_3;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <LCD_INIT+0x184>)
 8000768:	2208      	movs	r2, #8
 800076a:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <LCD_INIT+0x184>)
 800076e:	2204      	movs	r2, #4
 8000770:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <LCD_INIT+0x184>)
 8000774:	2201      	movs	r2, #1
 8000776:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 8000778:	492f      	ldr	r1, [pc, #188]	; (8000838 <LCD_INIT+0x184>)
 800077a:	4830      	ldr	r0, [pc, #192]	; (800083c <LCD_INIT+0x188>)
 800077c:	f000 f957 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_4;
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <LCD_INIT+0x184>)
 8000782:	2210      	movs	r2, #16
 8000784:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <LCD_INIT+0x184>)
 8000788:	2204      	movs	r2, #4
 800078a:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <LCD_INIT+0x184>)
 800078e:	2201      	movs	r2, #1
 8000790:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 8000792:	4929      	ldr	r1, [pc, #164]	; (8000838 <LCD_INIT+0x184>)
 8000794:	4829      	ldr	r0, [pc, #164]	; (800083c <LCD_INIT+0x188>)
 8000796:	f000 f94a 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_5;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <LCD_INIT+0x184>)
 800079c:	2220      	movs	r2, #32
 800079e:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <LCD_INIT+0x184>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <LCD_INIT+0x184>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80007ac:	4922      	ldr	r1, [pc, #136]	; (8000838 <LCD_INIT+0x184>)
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <LCD_INIT+0x188>)
 80007b0:	f000 f93d 	bl	8000a2e <MCAL_GPIO_Init>
	LCD_clear_screen();
 80007b4:	f7ff ff60 	bl	8000678 <LCD_clear_screen>

	pinconfig.GPIO_PinNumber = GPIO_PIN_6;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <LCD_INIT+0x184>)
 80007ba:	2240      	movs	r2, #64	; 0x40
 80007bc:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <LCD_INIT+0x184>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <LCD_INIT+0x184>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80007ca:	491b      	ldr	r1, [pc, #108]	; (8000838 <LCD_INIT+0x184>)
 80007cc:	481b      	ldr	r0, [pc, #108]	; (800083c <LCD_INIT+0x188>)
 80007ce:	f000 f92e 	bl	8000a2e <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_7;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <LCD_INIT+0x184>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <LCD_INIT+0x184>)
 80007da:	2204      	movs	r2, #4
 80007dc:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <LCD_INIT+0x184>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80007e4:	4914      	ldr	r1, [pc, #80]	; (8000838 <LCD_INIT+0x184>)
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <LCD_INIT+0x188>)
 80007e8:	f000 f921 	bl	8000a2e <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <LCD_INIT+0x188>)
 80007f4:	f000 f9b6 	bl	8000b64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <LCD_INIT+0x188>)
 8000800:	f000 f9b0 	bl	8000b64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <LCD_INIT+0x188>)
 800080c:	f000 f9aa 	bl	8000b64 <MCAL_GPIO_WritePin>
	_delay_ms(15);
 8000810:	200f      	movs	r0, #15
 8000812:	f7ff ff15 	bl	8000640 <_delay_ms>
	LCD_clear_screen();
 8000816:	f7ff ff2f 	bl	8000678 <LCD_clear_screen>
	//#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800081a:	2038      	movs	r0, #56	; 0x38
 800081c:	f000 f810 	bl	8000840 <LCD_WRITE_COMMAND>

	//#ifdef FOUR_BIT_MODE
	//LCD_WRITE_COMMAND(0x02);
	//LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	//#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000820:	2006      	movs	r0, #6
 8000822:	f000 f80d 	bl	8000840 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	f000 f80a 	bl	8000840 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800082c:	200f      	movs	r0, #15
 800082e:	f000 f807 	bl	8000840 <LCD_WRITE_COMMAND>

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000003c 	.word	0x2000003c
 800083c:	40010800 	.word	0x40010800

08000840 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
//#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	//LCD_PORT = command;
	MCAL_GPIO_WritePORT(LCD_CTRL, command) ;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	b29b      	uxth	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <LCD_WRITE_COMMAND+0x40>)
 8000852:	f000 f99e 	bl	8000b92 <MCAL_GPIO_WritePORT>

	//LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET) ;
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <LCD_WRITE_COMMAND+0x40>)
 800085e:	f000 f981 	bl	8000b64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <LCD_WRITE_COMMAND+0x40>)
 800086a:	f000 f97b 	bl	8000b64 <MCAL_GPIO_WritePin>

	_delay_ms(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fee6 	bl	8000640 <_delay_ms>
	LCD_kick();
 8000874:	f7ff ff08 	bl	8000688 <LCD_kick>
//	LCD_kick ();
//	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
//	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
//	LCD_kick();
//#endif
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40010800 	.word	0x40010800

08000884 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
//#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	//LCD_PORT = character;
	MCAL_GPIO_WritePORT(LCD_CTRL, character) ;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	b29b      	uxth	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <LCD_WRITE_CHAR+0x40>)
 8000896:	f000 f97c 	bl	8000b92 <MCAL_GPIO_WritePORT>

	//LCD_CTRL &= ~(1 << RW_SWITCH);
	//LCD_CTRL |= (1 << RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET) ;
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <LCD_WRITE_CHAR+0x40>)
 80008a2:	f000 f95f 	bl	8000b64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <LCD_WRITE_CHAR+0x40>)
 80008ae:	f000 f959 	bl	8000b64 <MCAL_GPIO_WritePin>

	_delay_ms(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fec4 	bl	8000640 <_delay_ms>
	LCD_kick();
 80008b8:	f7ff fee6 	bl	8000688 <LCD_kick>
//	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
//	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
//	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
//	LCD_kick ();
//#endif
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800

080008c8 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d108      	bne.n	80008f0 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d805      	bhi.n	80008f0 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	3b80      	subs	r3, #128	; 0x80
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffa8 	bl	8000840 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d108      	bne.n	8000908 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d805      	bhi.n	8000908 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	3b40      	subs	r3, #64	; 0x40
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff9c 	bl	8000840 <LCD_WRITE_COMMAND>
		}
	}
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 800091c:	e01c      	b.n	8000958 <LCD_WRITE_STRING+0x48>
		count++;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffa9 	bl	8000884 <LCD_WRITE_CHAR>
		if (count == 16)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b10      	cmp	r3, #16
 8000936:	d104      	bne.n	8000942 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000938:	2100      	movs	r1, #0
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff ffc4 	bl	80008c8 <LCD_GOTO_XY>
 8000940:	e00a      	b.n	8000958 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b20      	cmp	r3, #32
 8000946:	d107      	bne.n	8000958 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000948:	f7ff fe96 	bl	8000678 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 800094c:	2100      	movs	r1, #0
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ffba 	bl	80008c8 <LCD_GOTO_XY>
			count = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1de      	bne.n	800091e <LCD_WRITE_STRING+0xe>
		}
	}
} 
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <Get_CRLH_Position>:
 */

#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2b80      	cmp	r3, #128	; 0x80
 8000976:	d042      	beq.n	80009fe <Get_CRLH_Position+0x96>
 8000978:	2b80      	cmp	r3, #128	; 0x80
 800097a:	dc11      	bgt.n	80009a0 <Get_CRLH_Position+0x38>
 800097c:	2b08      	cmp	r3, #8
 800097e:	d036      	beq.n	80009ee <Get_CRLH_Position+0x86>
 8000980:	2b08      	cmp	r3, #8
 8000982:	dc06      	bgt.n	8000992 <Get_CRLH_Position+0x2a>
 8000984:	2b02      	cmp	r3, #2
 8000986:	d02e      	beq.n	80009e6 <Get_CRLH_Position+0x7e>
 8000988:	2b04      	cmp	r3, #4
 800098a:	d02e      	beq.n	80009ea <Get_CRLH_Position+0x82>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d028      	beq.n	80009e2 <Get_CRLH_Position+0x7a>
 8000990:	e047      	b.n	8000a22 <Get_CRLH_Position+0xba>
 8000992:	2b20      	cmp	r3, #32
 8000994:	d02f      	beq.n	80009f6 <Get_CRLH_Position+0x8e>
 8000996:	2b40      	cmp	r3, #64	; 0x40
 8000998:	d02f      	beq.n	80009fa <Get_CRLH_Position+0x92>
 800099a:	2b10      	cmp	r3, #16
 800099c:	d029      	beq.n	80009f2 <Get_CRLH_Position+0x8a>
 800099e:	e040      	b.n	8000a22 <Get_CRLH_Position+0xba>
 80009a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009a4:	d033      	beq.n	8000a0e <Get_CRLH_Position+0xa6>
 80009a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009aa:	dc09      	bgt.n	80009c0 <Get_CRLH_Position+0x58>
 80009ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b0:	d029      	beq.n	8000a06 <Get_CRLH_Position+0x9e>
 80009b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009b6:	d028      	beq.n	8000a0a <Get_CRLH_Position+0xa2>
 80009b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009bc:	d021      	beq.n	8000a02 <Get_CRLH_Position+0x9a>
 80009be:	e030      	b.n	8000a22 <Get_CRLH_Position+0xba>
 80009c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c4:	d027      	beq.n	8000a16 <Get_CRLH_Position+0xae>
 80009c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ca:	dc03      	bgt.n	80009d4 <Get_CRLH_Position+0x6c>
 80009cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009d0:	d01f      	beq.n	8000a12 <Get_CRLH_Position+0xaa>
 80009d2:	e026      	b.n	8000a22 <Get_CRLH_Position+0xba>
 80009d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009d8:	d01f      	beq.n	8000a1a <Get_CRLH_Position+0xb2>
 80009da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009de:	d01e      	beq.n	8000a1e <Get_CRLH_Position+0xb6>
 80009e0:	e01f      	b.n	8000a22 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e01e      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 80009e6:	2304      	movs	r3, #4
 80009e8:	e01c      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 80009ea:	2308      	movs	r3, #8
 80009ec:	e01a      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 80009ee:	230c      	movs	r3, #12
 80009f0:	e018      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 80009f2:	2310      	movs	r3, #16
 80009f4:	e016      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 80009f6:	2314      	movs	r3, #20
 80009f8:	e014      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 80009fa:	2318      	movs	r3, #24
 80009fc:	e012      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 80009fe:	231c      	movs	r3, #28
 8000a00:	e010      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e00e      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8000a06:	2304      	movs	r3, #4
 8000a08:	e00c      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e00a      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	e008      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8000a12:	2310      	movs	r3, #16
 8000a14:	e006      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8000a16:	2314      	movs	r3, #20
 8000a18:	e004      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000a1a:	2318      	movs	r3, #24
 8000a1c:	e002      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000a1e:	231c      	movs	r3, #28
 8000a20:	e000      	b.n	8000a24 <Get_CRLH_Position+0xbc>
		break ;
	}
	return 0 ;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <MCAL_GPIO_Init>:
 * Note              -stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 *                     But LQFP48 package has only GPIO A,B,part of C,D exported as external pins from thw MCU
 */

void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* Pinconfig)
{
 8000a2e:	b590      	push	{r4, r7, lr}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* configregister = NULL ;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	configregister = (Pinconfig ->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	d801      	bhi.n	8000a4c <MCAL_GPIO_Init+0x1e>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	e001      	b.n	8000a50 <MCAL_GPIO_Init+0x22>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(Pinconfig->GPIO_PinNumber)) ;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff86 	bl	8000968 <Get_CRLH_Position>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	230f      	movs	r3, #15
 8000a62:	4093      	lsls	r3, r2
 8000a64:	43da      	mvns	r2, r3
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	601a      	str	r2, [r3, #0]

	//if pin is output
	if ( (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_PP) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_PP) )
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	2b07      	cmp	r3, #7
 8000a76:	d00b      	beq.n	8000a90 <MCAL_GPIO_Init+0x62>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	2b06      	cmp	r3, #6
 8000a7e:	d007      	beq.n	8000a90 <MCAL_GPIO_Init+0x62>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d003      	beq.n	8000a90 <MCAL_GPIO_Init+0x62>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d10e      	bne.n	8000aae <MCAL_GPIO_Init+0x80>
	{
		pin_config =  ((((Pinconfig->GPIO_Mode -4) << 2) | Pinconfig->GPIO_output_speed) & 0x0f );
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	3b04      	subs	r3, #4
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	78db      	ldrb	r3, [r3, #3]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e031      	b.n	8000b12 <MCAL_GPIO_Init+0xe4>
	//if pin is input
	else
	{
		// MODE = 00: Input mode (reset state)

		if ( (Pinconfig->GPIO_Mode == GPIO_Mode_Analog) || (Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_FLO ))
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	789b      	ldrb	r3, [r3, #2]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <MCAL_GPIO_Init+0x90>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	789b      	ldrb	r3, [r3, #2]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d107      	bne.n	8000ace <MCAL_GPIO_Init+0xa0>
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	789b      	ldrb	r3, [r3, #2]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e021      	b.n	8000b12 <MCAL_GPIO_Init+0xe4>

		}
		else if (Pinconfig->GPIO_Mode == GPIO_Mode_AF_INPUT) //consider it as input floating
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d102      	bne.n	8000adc <MCAL_GPIO_Init+0xae>
		{
			pin_config =  ((((GPIO_Mode_INPUT_FLO) << 2) | 0x0) & 0x0f );
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e01a      	b.n	8000b12 <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD Input
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	789b      	ldrb	r3, [r3, #2]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	73fb      	strb	r3, [r7, #15]
			if(Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_PU)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	789b      	ldrb	r3, [r3, #2]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d107      	bne.n	8000b02 <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= Pinconfig->GPIO_PinNumber ;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	8812      	ldrh	r2, [r2, #0]
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	e007      	b.n	8000b12 <MCAL_GPIO_Init+0xe4>
			}
			else //PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~ (Pinconfig->GPIO_PinNumber) ;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	8812      	ldrh	r2, [r2, #0]
 8000b0a:	43d2      	mvns	r2, r2
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60da      	str	r2, [r3, #12]
		}

	}
	//write on CRL OR CRH

	(*configregister) |= ( (pin_config) << Get_CRLH_Position(Pinconfig->GPIO_PinNumber) );
 8000b12:	7bfc      	ldrb	r4, [r7, #15]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff25 	bl	8000968 <Get_CRLH_Position>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	fa04 f203 	lsl.w	r2, r4, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	601a      	str	r2, [r3, #0]

}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}

08000b36 <MCAL_GPIO_ReadPin>:
 * @param[in]        -PinNumber : Set Pin Number according to @ref GPIO_PINS_define
 * @retval           -the input pin value (two values based on @ref GPIO_PIN_state
 * Note              -none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef * GPIOx , uint16_t PinNumber)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b085      	sub	sp, #20
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if (((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e001      	b.n	8000b58 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
	}

	return bitstatus ;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <MCAL_GPIO_WritePin>:
 * @retval           -none
 * Note              -none
 */

void MCAL_GPIO_WritePin (GPIO_TypeDef * GPIOx , uint16_t PinNumber , uint8_t value)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]

	if (value != (uint32_t)GPIO_PIN_RESET )
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <MCAL_GPIO_WritePin+0x1e>
		//or
		//		BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}
}
 8000b80:	e002      	b.n	8000b88 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000b82:	887a      	ldrh	r2, [r7, #2]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	615a      	str	r2, [r3, #20]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <MCAL_GPIO_WritePORT>:
 * @param[in]        -Value : Port value
 * @retval           -none
 * Note              -none
 */
void MCAL_GPIO_WritePORT (GPIO_TypeDef * GPIOx , uint16_t value)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value ;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	60da      	str	r2, [r3, #12]

}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
	...

08000bb0 <__libc_init_array>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4e0c      	ldr	r6, [pc, #48]	; (8000be8 <__libc_init_array+0x38>)
 8000bb6:	4c0d      	ldr	r4, [pc, #52]	; (8000bec <__libc_init_array+0x3c>)
 8000bb8:	1ba4      	subs	r4, r4, r6
 8000bba:	10a4      	asrs	r4, r4, #2
 8000bbc:	42a5      	cmp	r5, r4
 8000bbe:	d109      	bne.n	8000bd4 <__libc_init_array+0x24>
 8000bc0:	f000 f81a 	bl	8000bf8 <_init>
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	4e0a      	ldr	r6, [pc, #40]	; (8000bf0 <__libc_init_array+0x40>)
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <__libc_init_array+0x44>)
 8000bca:	1ba4      	subs	r4, r4, r6
 8000bcc:	10a4      	asrs	r4, r4, #2
 8000bce:	42a5      	cmp	r5, r4
 8000bd0:	d105      	bne.n	8000bde <__libc_init_array+0x2e>
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd8:	4798      	blx	r3
 8000bda:	3501      	adds	r5, #1
 8000bdc:	e7ee      	b.n	8000bbc <__libc_init_array+0xc>
 8000bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be2:	4798      	blx	r3
 8000be4:	3501      	adds	r5, #1
 8000be6:	e7f2      	b.n	8000bce <__libc_init_array+0x1e>
 8000be8:	08000c44 	.word	0x08000c44
 8000bec:	08000c44 	.word	0x08000c44
 8000bf0:	08000c44 	.word	0x08000c44
 8000bf4:	08000c48 	.word	0x08000c48

08000bf8 <_init>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr

08000c04 <_fini>:
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c06:	bf00      	nop
 8000c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0a:	bc08      	pop	{r3}
 8000c0c:	469e      	mov	lr, r3
 8000c0e:	4770      	bx	lr
