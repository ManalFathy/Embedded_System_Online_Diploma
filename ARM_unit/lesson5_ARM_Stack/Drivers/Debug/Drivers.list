
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e0c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000f3c  08000f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f48  08000f48  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000f48  08000f48  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f48  08000f48  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f4c  08000f4c  00010f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000004  08000f54  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000f54  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d8a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e7b  00000000  00000000  00025db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001070  00000000  00000000  00026c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002a0  00000000  00000000  00027ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000228  00000000  00000000  00027f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f45  00000000  00000000  00028170  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002f74  00000000  00000000  000290b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c1cc  00000000  00000000  0002c029  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000381f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000884  00000000  00000000  00038270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f24 	.word	0x08000f24

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000f24 	.word	0x08000f24

08000170 <_delay_ms>:
 *  Author: Manal 
 */ 
#include "../../HAL/includes/lcd.h"

void _delay_ms(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0 ; i<x ; i++);
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e002      	b.n	8000184 <_delay_ms+0x14>
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	3301      	adds	r3, #1
 8000182:	60fb      	str	r3, [r7, #12]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	429a      	cmp	r2, r3
 800018a:	d3f8      	bcc.n	800017e <_delay_ms+0xe>
	for(j=0 ;j<255 ; j++);
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]
 8000190:	e002      	b.n	8000198 <_delay_ms+0x28>
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	3301      	adds	r3, #1
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	68bb      	ldr	r3, [r7, #8]
 800019a:	2bfe      	cmp	r3, #254	; 0xfe
 800019c:	d9f9      	bls.n	8000192 <_delay_ms+0x22>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_clear_screen>:

void LCD_clear_screen(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80001ac:	2001      	movs	r0, #1
 80001ae:	f000 f8df 	bl	8000370 <LCD_WRITE_COMMAND>
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <LCD_kick>:
void LCD_kick(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//LCD_CTRL |= (1 << ENABLE_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_SET) ;
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <LCD_kick+0x28>)
 80001c4:	f000 fe65 	bl	8000e92 <MCAL_GPIO_WritePin>
	_delay_ms(50);
 80001c8:	2032      	movs	r0, #50	; 0x32
 80001ca:	f7ff ffd1 	bl	8000170 <_delay_ms>
//	LCD_CTRL &= ~(1 << ENABLE_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET) ;
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d4:	4802      	ldr	r0, [pc, #8]	; (80001e0 <LCD_kick+0x28>)
 80001d6:	f000 fe5c 	bl	8000e92 <MCAL_GPIO_WritePin>
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40010800 	.word	0x40010800

080001e4 <LCD_INIT>:
	//LCD_CTRL &= ~(1<<RW_SWITCH); //write
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
}

void LCD_INIT()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	_delay_ms(20);
 80001e8:	2014      	movs	r0, #20
 80001ea:	f7ff ffc1 	bl	8000170 <_delay_ms>
	//	DataDIR_LCD_CTRL |= (1<<ENABLE_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	//	LCD_CTRL &= ~ (1<<ENABLE_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);


	// ENABLE_SWITCH , RS_SWITCH ,RW_SWITCH  input HighZ floating input
	pinconfig.GPIO_PinNumber = ENABLE_SWITCH;
 80001ee:	4b5e      	ldr	r3, [pc, #376]	; (8000368 <LCD_INIT+0x184>)
 80001f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f4:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80001f6:	4b5c      	ldr	r3, [pc, #368]	; (8000368 <LCD_INIT+0x184>)
 80001f8:	2204      	movs	r2, #4
 80001fa:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80001fc:	4b5a      	ldr	r3, [pc, #360]	; (8000368 <LCD_INIT+0x184>)
 80001fe:	2201      	movs	r2, #1
 8000200:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 8000202:	4959      	ldr	r1, [pc, #356]	; (8000368 <LCD_INIT+0x184>)
 8000204:	4859      	ldr	r0, [pc, #356]	; (800036c <LCD_INIT+0x188>)
 8000206:	f000 fdc0 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = RS_SWITCH;
 800020a:	4b57      	ldr	r3, [pc, #348]	; (8000368 <LCD_INIT+0x184>)
 800020c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000210:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000212:	4b55      	ldr	r3, [pc, #340]	; (8000368 <LCD_INIT+0x184>)
 8000214:	2204      	movs	r2, #4
 8000216:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000218:	4b53      	ldr	r3, [pc, #332]	; (8000368 <LCD_INIT+0x184>)
 800021a:	2201      	movs	r2, #1
 800021c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800021e:	4952      	ldr	r1, [pc, #328]	; (8000368 <LCD_INIT+0x184>)
 8000220:	4852      	ldr	r0, [pc, #328]	; (800036c <LCD_INIT+0x188>)
 8000222:	f000 fdb2 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = RW_SWITCH;
 8000226:	4b50      	ldr	r3, [pc, #320]	; (8000368 <LCD_INIT+0x184>)
 8000228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800022c:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 800022e:	4b4e      	ldr	r3, [pc, #312]	; (8000368 <LCD_INIT+0x184>)
 8000230:	2204      	movs	r2, #4
 8000232:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000234:	4b4c      	ldr	r3, [pc, #304]	; (8000368 <LCD_INIT+0x184>)
 8000236:	2201      	movs	r2, #1
 8000238:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800023a:	494b      	ldr	r1, [pc, #300]	; (8000368 <LCD_INIT+0x184>)
 800023c:	484b      	ldr	r0, [pc, #300]	; (800036c <LCD_INIT+0x188>)
 800023e:	f000 fda4 	bl	8000d8a <MCAL_GPIO_Init>


	//DataDIR_LCD_PORT =0xFF;data in output direction
	_delay_ms(15);
 8000242:	200f      	movs	r0, #15
 8000244:	f7ff ff94 	bl	8000170 <_delay_ms>
	//data pins output with speed 10MHZ

	pinconfig.GPIO_PinNumber = GPIO_PIN_0;
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <LCD_INIT+0x184>)
 800024a:	2201      	movs	r2, #1
 800024c:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 800024e:	4b46      	ldr	r3, [pc, #280]	; (8000368 <LCD_INIT+0x184>)
 8000250:	2204      	movs	r2, #4
 8000252:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000254:	4b44      	ldr	r3, [pc, #272]	; (8000368 <LCD_INIT+0x184>)
 8000256:	2201      	movs	r2, #1
 8000258:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800025a:	4943      	ldr	r1, [pc, #268]	; (8000368 <LCD_INIT+0x184>)
 800025c:	4843      	ldr	r0, [pc, #268]	; (800036c <LCD_INIT+0x188>)
 800025e:	f000 fd94 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_1;
 8000262:	4b41      	ldr	r3, [pc, #260]	; (8000368 <LCD_INIT+0x184>)
 8000264:	2202      	movs	r2, #2
 8000266:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000268:	4b3f      	ldr	r3, [pc, #252]	; (8000368 <LCD_INIT+0x184>)
 800026a:	2204      	movs	r2, #4
 800026c:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 800026e:	4b3e      	ldr	r3, [pc, #248]	; (8000368 <LCD_INIT+0x184>)
 8000270:	2201      	movs	r2, #1
 8000272:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 8000274:	493c      	ldr	r1, [pc, #240]	; (8000368 <LCD_INIT+0x184>)
 8000276:	483d      	ldr	r0, [pc, #244]	; (800036c <LCD_INIT+0x188>)
 8000278:	f000 fd87 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_2;
 800027c:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <LCD_INIT+0x184>)
 800027e:	2204      	movs	r2, #4
 8000280:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000282:	4b39      	ldr	r3, [pc, #228]	; (8000368 <LCD_INIT+0x184>)
 8000284:	2204      	movs	r2, #4
 8000286:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 8000288:	4b37      	ldr	r3, [pc, #220]	; (8000368 <LCD_INIT+0x184>)
 800028a:	2201      	movs	r2, #1
 800028c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 800028e:	4936      	ldr	r1, [pc, #216]	; (8000368 <LCD_INIT+0x184>)
 8000290:	4836      	ldr	r0, [pc, #216]	; (800036c <LCD_INIT+0x188>)
 8000292:	f000 fd7a 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_3;
 8000296:	4b34      	ldr	r3, [pc, #208]	; (8000368 <LCD_INIT+0x184>)
 8000298:	2208      	movs	r2, #8
 800029a:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 800029c:	4b32      	ldr	r3, [pc, #200]	; (8000368 <LCD_INIT+0x184>)
 800029e:	2204      	movs	r2, #4
 80002a0:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80002a2:	4b31      	ldr	r3, [pc, #196]	; (8000368 <LCD_INIT+0x184>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80002a8:	492f      	ldr	r1, [pc, #188]	; (8000368 <LCD_INIT+0x184>)
 80002aa:	4830      	ldr	r0, [pc, #192]	; (800036c <LCD_INIT+0x188>)
 80002ac:	f000 fd6d 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_4;
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <LCD_INIT+0x184>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80002b6:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <LCD_INIT+0x184>)
 80002b8:	2204      	movs	r2, #4
 80002ba:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <LCD_INIT+0x184>)
 80002be:	2201      	movs	r2, #1
 80002c0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80002c2:	4929      	ldr	r1, [pc, #164]	; (8000368 <LCD_INIT+0x184>)
 80002c4:	4829      	ldr	r0, [pc, #164]	; (800036c <LCD_INIT+0x188>)
 80002c6:	f000 fd60 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_5;
 80002ca:	4b27      	ldr	r3, [pc, #156]	; (8000368 <LCD_INIT+0x184>)
 80002cc:	2220      	movs	r2, #32
 80002ce:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80002d0:	4b25      	ldr	r3, [pc, #148]	; (8000368 <LCD_INIT+0x184>)
 80002d2:	2204      	movs	r2, #4
 80002d4:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80002d6:	4b24      	ldr	r3, [pc, #144]	; (8000368 <LCD_INIT+0x184>)
 80002d8:	2201      	movs	r2, #1
 80002da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80002dc:	4922      	ldr	r1, [pc, #136]	; (8000368 <LCD_INIT+0x184>)
 80002de:	4823      	ldr	r0, [pc, #140]	; (800036c <LCD_INIT+0x188>)
 80002e0:	f000 fd53 	bl	8000d8a <MCAL_GPIO_Init>
	LCD_clear_screen();
 80002e4:	f7ff ff60 	bl	80001a8 <LCD_clear_screen>

	pinconfig.GPIO_PinNumber = GPIO_PIN_6;
 80002e8:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <LCD_INIT+0x184>)
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <LCD_INIT+0x184>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <LCD_INIT+0x184>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 80002fa:	491b      	ldr	r1, [pc, #108]	; (8000368 <LCD_INIT+0x184>)
 80002fc:	481b      	ldr	r0, [pc, #108]	; (800036c <LCD_INIT+0x188>)
 80002fe:	f000 fd44 	bl	8000d8a <MCAL_GPIO_Init>

	pinconfig.GPIO_PinNumber = GPIO_PIN_7;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <LCD_INIT+0x184>)
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	801a      	strh	r2, [r3, #0]
	pinconfig.GPIO_Mode = GPIO_Mode_OUTPUT_PP ;
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <LCD_INIT+0x184>)
 800030a:	2204      	movs	r2, #4
 800030c:	709a      	strb	r2, [r3, #2]
	pinconfig.GPIO_output_speed = GPIO_output_speed_10M;
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <LCD_INIT+0x184>)
 8000310:	2201      	movs	r2, #1
 8000312:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinconfig);
 8000314:	4914      	ldr	r1, [pc, #80]	; (8000368 <LCD_INIT+0x184>)
 8000316:	4815      	ldr	r0, [pc, #84]	; (800036c <LCD_INIT+0x188>)
 8000318:	f000 fd37 	bl	8000d8a <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4812      	ldr	r0, [pc, #72]	; (800036c <LCD_INIT+0x188>)
 8000324:	f000 fdb5 	bl	8000e92 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <LCD_INIT+0x188>)
 8000330:	f000 fdaf 	bl	8000e92 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <LCD_INIT+0x188>)
 800033c:	f000 fda9 	bl	8000e92 <MCAL_GPIO_WritePin>
	_delay_ms(15);
 8000340:	200f      	movs	r0, #15
 8000342:	f7ff ff15 	bl	8000170 <_delay_ms>
	LCD_clear_screen();
 8000346:	f7ff ff2f 	bl	80001a8 <LCD_clear_screen>
	//#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800034a:	2038      	movs	r0, #56	; 0x38
 800034c:	f000 f810 	bl	8000370 <LCD_WRITE_COMMAND>

	//#ifdef FOUR_BIT_MODE
	//LCD_WRITE_COMMAND(0x02);
	//LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	//#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000350:	2006      	movs	r0, #6
 8000352:	f000 f80d 	bl	8000370 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000356:	2080      	movs	r0, #128	; 0x80
 8000358:	f000 f80a 	bl	8000370 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800035c:	200f      	movs	r0, #15
 800035e:	f000 f807 	bl	8000370 <LCD_WRITE_COMMAND>

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000030 	.word	0x20000030
 800036c:	40010800 	.word	0x40010800

08000370 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
//#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	//LCD_PORT = command;
	MCAL_GPIO_WritePORT(LCD_CTRL, command) ;
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4619      	mov	r1, r3
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <LCD_WRITE_COMMAND+0x40>)
 8000382:	f000 fd9d 	bl	8000ec0 <MCAL_GPIO_WritePORT>

	//LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET) ;
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038c:	4808      	ldr	r0, [pc, #32]	; (80003b0 <LCD_WRITE_COMMAND+0x40>)
 800038e:	f000 fd80 	bl	8000e92 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <LCD_WRITE_COMMAND+0x40>)
 800039a:	f000 fd7a 	bl	8000e92 <MCAL_GPIO_WritePin>

	_delay_ms(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff fee6 	bl	8000170 <_delay_ms>
	LCD_kick();
 80003a4:	f7ff ff08 	bl	80001b8 <LCD_kick>
//	LCD_kick ();
//	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
//	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
//	LCD_kick();
//#endif
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010800 	.word	0x40010800

080003b4 <SVC_Handler>:
	privileged ,
	unprivileged
};

void SVC_Handler()
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	OS_SWITCH_to_PrivilageMode;
 80003b8:	f3ef 8314 	mrs	r3, CONTROL
 80003bc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80003c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80003c4:	f383 8814 	msr	CONTROL, r3
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <EXTI9_Callback>:

unsigned int CPU_Control_Register = 0;
unsigned int CPU_IPSR_Register = 0;

void EXTI9_Callback(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

	if(IRQ_flag == 0)
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <EXTI9_Callback+0x38>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d106      	bne.n	80003ea <EXTI9_Callback+0x1a>
	{
		IRQ_flag =1;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <EXTI9_Callback+0x38>)
 80003de:	2201      	movs	r2, #1
 80003e0:	601a      	str	r2, [r3, #0]
		TaskA_flag =1 ;
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <EXTI9_Callback+0x3c>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
	{
		TaskB_flag =1 ;
		IRQ_flag =0;
	}
	//SWITCH_CPU_AcessLevel(privileged);
}
 80003e8:	e009      	b.n	80003fe <EXTI9_Callback+0x2e>
	else if (IRQ_flag == 1)
 80003ea:	4b07      	ldr	r3, [pc, #28]	; (8000408 <EXTI9_Callback+0x38>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d105      	bne.n	80003fe <EXTI9_Callback+0x2e>
		TaskB_flag =1 ;
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <EXTI9_Callback+0x40>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	601a      	str	r2, [r3, #0]
		IRQ_flag =0;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <EXTI9_Callback+0x38>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000020 	.word	0x20000020
 800040c:	20000044 	.word	0x20000044
 8000410:	2000003c 	.word	0x2000003c

08000414 <TaskA>:


int TaskA(int a , int b , int c )
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	return a+b+c ;
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	441a      	add	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4413      	add	r3, r2
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <TaskB>:

int TaskB(int a , int b , int c , int d)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	603b      	str	r3, [r7, #0]
	return a+b+c ;
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	441a      	add	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4413      	add	r3, r2
}
 800044c:	4618      	mov	r0, r3
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
	...

08000458 <MainOS>:
void MainOS()
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	//Main Stack
	_E_MSP = (_S_MSP - 512); // Descending stack
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <MainOS+0xe4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000464:	4a36      	ldr	r2, [pc, #216]	; (8000540 <MainOS+0xe8>)
 8000466:	6013      	str	r3, [r2, #0]

	//Task A Stack
	_S_PSP_TA = (_E_MSP - 8);
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MainOS+0xe8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3b08      	subs	r3, #8
 800046e:	4a35      	ldr	r2, [pc, #212]	; (8000544 <MainOS+0xec>)
 8000470:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = (_S_PSP_TA - TaskA_Stack_Size);
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <MainOS+0xec>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	3b64      	subs	r3, #100	; 0x64
 8000478:	4a33      	ldr	r2, [pc, #204]	; (8000548 <MainOS+0xf0>)
 800047a:	6013      	str	r3, [r2, #0]

	//Task B Stack
	_S_PSP_TB = (_E_PSP_TA - 8);
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <MainOS+0xf0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b08      	subs	r3, #8
 8000482:	4a32      	ldr	r2, [pc, #200]	; (800054c <MainOS+0xf4>)
 8000484:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = (_S_PSP_TB - TaskB_Stack_Size);
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <MainOS+0xf4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b64      	subs	r3, #100	; 0x64
 800048c:	4a30      	ldr	r2, [pc, #192]	; (8000550 <MainOS+0xf8>)
 800048e:	6013      	str	r3, [r2, #0]

	while(1)
	{
		__asm("nop");
 8000490:	bf00      	nop
		if(TaskA_flag == 1)
 8000492:	4b30      	ldr	r3, [pc, #192]	; (8000554 <MainOS+0xfc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d125      	bne.n	80004e6 <MainOS+0x8e>
		{    //set PSP Register = _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA);
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MainOS+0xec>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f380 8809 	msr	PSP, r0
			//SP = PSP instead of MSP
			OS_SWITCH_SP_to_PSP;
 80004a4:	f3ef 8014 	mrs	r0, CONTROL
 80004a8:	f04f 0102 	mov.w	r1, #2
 80004ac:	ea40 0001 	orr.w	r0, r0, r1
 80004b0:	f380 8814 	msr	CONTROL, r0
			//Switch from privileged to unprivileged
			OS_SWITCH_to_UNPrivilageMode;
 80004b4:	f3ef 8314 	mrs	r3, CONTROL
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	f383 8814 	msr	CONTROL, r3

			TaskA_flag = TaskA(1, 2, 3) ;
 80004c0:	2203      	movs	r2, #3
 80004c2:	2102      	movs	r1, #2
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ffa5 	bl	8000414 <TaskA>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b21      	ldr	r3, [pc, #132]	; (8000554 <MainOS+0xfc>)
 80004d0:	601a      	str	r2, [r3, #0]

			//Switch from unprivileged to privileged
			OS_Generate_Expections ;
 80004d2:	df03      	svc	3
			//SP = MSP
			OS_SWITCH_SP_to_MSP ;
 80004d4:	f3ef 8014 	mrs	r0, CONTROL
 80004d8:	f04f 0105 	mov.w	r1, #5
 80004dc:	ea00 0001 	and.w	r0, r0, r1
 80004e0:	f380 8814 	msr	CONTROL, r0
 80004e4:	e7d4      	b.n	8000490 <MainOS+0x38>
		}
		else if(TaskB_flag == 1)
 80004e6:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <MainOS+0x100>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d1d0      	bne.n	8000490 <MainOS+0x38>
		{
			//set PSP Register = _S_PSP_TB
			OS_SET_PSP(_S_PSP_TB);
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <MainOS+0xf4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f380 8809 	msr	PSP, r0
			//SP = PSP instead of MSP
			OS_SWITCH_SP_to_PSP;
 80004f8:	f3ef 8014 	mrs	r0, CONTROL
 80004fc:	f04f 0102 	mov.w	r1, #2
 8000500:	ea40 0001 	orr.w	r0, r0, r1
 8000504:	f380 8814 	msr	CONTROL, r0
			//Switch from privileged to unprivileged
			OS_SWITCH_to_UNPrivilageMode;
 8000508:	f3ef 8314 	mrs	r3, CONTROL
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	f383 8814 	msr	CONTROL, r3

			TaskB_flag =TaskB(1, 2, 3, 4) ;
 8000514:	2304      	movs	r3, #4
 8000516:	2203      	movs	r2, #3
 8000518:	2102      	movs	r1, #2
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ff8a 	bl	8000434 <TaskB>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MainOS+0x100>)
 8000526:	601a      	str	r2, [r3, #0]
			//Switch from unprivileged to privileged
			OS_Generate_Expections;
 8000528:	df03      	svc	3
			//SP = MSP
			OS_SWITCH_SP_to_MSP ;
 800052a:	f3ef 8014 	mrs	r0, CONTROL
 800052e:	f04f 0105 	mov.w	r1, #5
 8000532:	ea00 0001 	and.w	r0, r0, r1
 8000536:	f380 8814 	msr	CONTROL, r0
		__asm("nop");
 800053a:	e7a9      	b.n	8000490 <MainOS+0x38>
 800053c:	20000000 	.word	0x20000000
 8000540:	20000034 	.word	0x20000034
 8000544:	20000038 	.word	0x20000038
 8000548:	2000004c 	.word	0x2000004c
 800054c:	20000040 	.word	0x20000040
 8000550:	20000048 	.word	0x20000048
 8000554:	20000044 	.word	0x20000044
 8000558:	2000003c 	.word	0x2000003c

0800055c <main>:
		}
	}
}

int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0x68>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <main+0x68>)
 8000568:	f043 0304 	orr.w	r3, r3, #4
 800056c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0x68>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0x68>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <main+0x68>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <main+0x68>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000586:	f7ff fe2d 	bl	80001e4 <LCD_INIT>
	LCD_clear_screen();
 800058a:	f7ff fe0d 	bl	80001a8 <LCD_clear_screen>

	EXTI_Pinconfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <main+0x6c>)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	ca07      	ldmia	r2, {r0, r1, r2}
 8000594:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING ;
 8000598:	2300      	movs	r3, #0
 800059a:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_Callback = EXTI9_Callback ;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0x70>)
 800059e:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable ;
 80005a0:	2301      	movs	r3, #1
 80005a2:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_INIT(&EXTI_CFG);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f9f6 	bl	8000998 <MCAL_EXTI_GPIO_INIT>


	MainOS();
 80005ac:	f7ff ff54 	bl	8000458 <MainOS>
	//SWITCH_CPU_AcessLevel(unprivileged);


	while(1)
	{
		if(IRQ_flag)
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <main+0x74>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0fb      	beq.n	80005b0 <main+0x54>
		{
			LCD_clear_screen();
 80005b8:	f7ff fdf6 	bl	80001a8 <LCD_clear_screen>
			IRQ_flag =0;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <main+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
		if(IRQ_flag)
 80005c2:	e7f5      	b.n	80005b0 <main+0x54>
 80005c4:	40021000 	.word	0x40021000
 80005c8:	08000f3c 	.word	0x08000f3c
 80005cc:	080003d1 	.word	0x080003d1
 80005d0:	20000020 	.word	0x20000020

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490d      	ldr	r1, [pc, #52]	; (8000614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0a      	ldr	r4, [pc, #40]	; (8000620 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000602:	f000 fc6b 	bl	8000edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff ffa9 	bl	800055c <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   r0, =_estack
 800060c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000618:	08000f50 	.word	0x08000f50
  ldr r2, =_sbss
 800061c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000620:	2000008c 	.word	0x2000008c

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <Enable_NVIC>:
 *                                          Generic Functions
 *======================================================================
 */

 void Enable_NVIC (uint16_t IRQ)
 {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  switch(IRQ)
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d854      	bhi.n	80006e2 <Enable_NVIC+0xba>
 8000638:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <Enable_NVIC+0x18>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000681 	.word	0x08000681
 8000644:	0800068f 	.word	0x0800068f
 8000648:	0800069d 	.word	0x0800069d
 800064c:	080006ab 	.word	0x080006ab
 8000650:	080006b9 	.word	0x080006b9
 8000654:	080006c7 	.word	0x080006c7
 8000658:	080006c7 	.word	0x080006c7
 800065c:	080006c7 	.word	0x080006c7
 8000660:	080006c7 	.word	0x080006c7
 8000664:	080006c7 	.word	0x080006c7
 8000668:	080006d5 	.word	0x080006d5
 800066c:	080006d5 	.word	0x080006d5
 8000670:	080006d5 	.word	0x080006d5
 8000674:	080006d5 	.word	0x080006d5
 8000678:	080006d5 	.word	0x080006d5
 800067c:	080006d5 	.word	0x080006d5
  {
  case 0:
	  NVIC_IRQ6_EXTI0_Enable ;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <Enable_NVIC+0xc4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <Enable_NVIC+0xc4>)
 8000686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068a:	6013      	str	r3, [r2, #0]
	  break ;
 800068c:	e029      	b.n	80006e2 <Enable_NVIC+0xba>
  case 1:
	   NVIC_IRQ7_EXTI1_Enable ;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <Enable_NVIC+0xc4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <Enable_NVIC+0xc4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6013      	str	r3, [r2, #0]
	   break ;
 800069a:	e022      	b.n	80006e2 <Enable_NVIC+0xba>
  case 2:
	   NVIC_IRQ8_EXTI2_Enable ;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <Enable_NVIC+0xc4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <Enable_NVIC+0xc4>)
 80006a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a6:	6013      	str	r3, [r2, #0]
	   break ;
 80006a8:	e01b      	b.n	80006e2 <Enable_NVIC+0xba>
  case 3:
	   NVIC_IRQ9_EXTI3_Enable ;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <Enable_NVIC+0xc4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <Enable_NVIC+0xc4>)
 80006b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b4:	6013      	str	r3, [r2, #0]
	   break ;
 80006b6:	e014      	b.n	80006e2 <Enable_NVIC+0xba>
  case 4:
	    NVIC_IRQ10_EXTI4_Enable ;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <Enable_NVIC+0xc4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <Enable_NVIC+0xc4>)
 80006be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006c2:	6013      	str	r3, [r2, #0]
	    break ;
 80006c4:	e00d      	b.n	80006e2 <Enable_NVIC+0xba>
  case 5:
  case 6:
  case 7:
  case 8:
  case 9:
	  NVIC_IRQ23_EXTI5_9_Enable ;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <Enable_NVIC+0xc4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <Enable_NVIC+0xc4>)
 80006cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006d0:	6013      	str	r3, [r2, #0]
	  break ;
 80006d2:	e006      	b.n	80006e2 <Enable_NVIC+0xba>
  case 11:
  case 12:
  case 13:
  case 14:
  case 15:
	  NVIC_IRQ40_EXTI10_15_Enable ;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <Enable_NVIC+0xc8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <Enable_NVIC+0xc8>)
 80006da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006de:	6013      	str	r3, [r2, #0]
	  break ;
 80006e0:	bf00      	nop
  }


 }
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000e104 	.word	0xe000e104

080006f4 <Disable_NVIC>:


 void Disable_NVIC (uint16_t IRQ)
  {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ)
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d854      	bhi.n	80007ae <Disable_NVIC+0xba>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <Disable_NVIC+0x18>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	0800074d 	.word	0x0800074d
 8000710:	0800075b 	.word	0x0800075b
 8000714:	08000769 	.word	0x08000769
 8000718:	08000777 	.word	0x08000777
 800071c:	08000785 	.word	0x08000785
 8000720:	08000793 	.word	0x08000793
 8000724:	08000793 	.word	0x08000793
 8000728:	08000793 	.word	0x08000793
 800072c:	08000793 	.word	0x08000793
 8000730:	08000793 	.word	0x08000793
 8000734:	080007a1 	.word	0x080007a1
 8000738:	080007a1 	.word	0x080007a1
 800073c:	080007a1 	.word	0x080007a1
 8000740:	080007a1 	.word	0x080007a1
 8000744:	080007a1 	.word	0x080007a1
 8000748:	080007a1 	.word	0x080007a1
	   {
	   case 0:
	 	  NVIC_IRQ6_EXTI0_Disable ;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <Disable_NVIC+0xc4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <Disable_NVIC+0xc4>)
 8000752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000756:	6013      	str	r3, [r2, #0]
	 	  break ;
 8000758:	e029      	b.n	80007ae <Disable_NVIC+0xba>
	   case 1:
	 	   NVIC_IRQ7_EXTI1_Disable ;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <Disable_NVIC+0xc4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <Disable_NVIC+0xc4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6013      	str	r3, [r2, #0]
	 	   break ;
 8000766:	e022      	b.n	80007ae <Disable_NVIC+0xba>
	   case 2:
	 	   NVIC_IRQ8_EXTI2_Disable ;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <Disable_NVIC+0xc4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <Disable_NVIC+0xc4>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000772:	6013      	str	r3, [r2, #0]
	 	   break ;
 8000774:	e01b      	b.n	80007ae <Disable_NVIC+0xba>
	   case 3:
	 	   NVIC_IRQ9_EXTI3_Disable ;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <Disable_NVIC+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <Disable_NVIC+0xc4>)
 800077c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000780:	6013      	str	r3, [r2, #0]
	 	   break ;
 8000782:	e014      	b.n	80007ae <Disable_NVIC+0xba>
	   case 4:
	 	    NVIC_IRQ10_EXTI4_Disable ;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <Disable_NVIC+0xc4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <Disable_NVIC+0xc4>)
 800078a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800078e:	6013      	str	r3, [r2, #0]
	 	    break ;
 8000790:	e00d      	b.n	80007ae <Disable_NVIC+0xba>
	   case 5:
	   case 6:
	   case 7:
	   case 8:
	   case 9:
	 	  NVIC_IRQ23_EXTI5_9_Disable ;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <Disable_NVIC+0xc4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <Disable_NVIC+0xc4>)
 8000798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800079c:	6013      	str	r3, [r2, #0]
	 	  break ;
 800079e:	e006      	b.n	80007ae <Disable_NVIC+0xba>
	   case 11:
	   case 12:
	   case 13:
	   case 14:
	   case 15:
	 	  NVIC_IRQ40_EXTI10_15_Disable ;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <Disable_NVIC+0xc8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a05      	ldr	r2, [pc, #20]	; (80007bc <Disable_NVIC+0xc8>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
	 	  break ;
 80007ac:	bf00      	nop
	   }


  }
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	e000e180 	.word	0xe000e180
 80007bc:	e000e184 	.word	0xe000e184

080007c0 <Update_EXTI>:




void Update_EXTI(EXTI_Pinconfig_t* EXTI_Config)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
//1- configure GPIO to be AF input >> Floating input
GPIO_PinConfig_t pinCfg;
pinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	891b      	ldrh	r3, [r3, #8]
 80007cc:	813b      	strh	r3, [r7, #8]
pinCfg.GPIO_Mode = GPIO_Mode_INPUT_FLO ;
 80007ce:	2301      	movs	r3, #1
 80007d0:	72bb      	strb	r3, [r7, #10]
MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port , &pinCfg);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f107 0208 	add.w	r2, r7, #8
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fad4 	bl	8000d8a <MCAL_GPIO_Init>

//========================================================
//2-update AFIO to route between EXTI line with port A,B,C,D
uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXT_InputLineNumber / 4 ;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	73fb      	strb	r3, [r7, #15]
uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_PIN.EXT_InputLineNumber % 4) * 4  ;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	73bb      	strb	r3, [r7, #14]
//clear the four bit
AFIO->EXTICR[AFIO_EXTICR_index] &= (0xF <<AFIO_EXTICR_position);
 80007fc:	4a5f      	ldr	r2, [pc, #380]	; (800097c <Update_EXTI+0x1bc>)
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3302      	adds	r3, #2
 8000802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	210f      	movs	r1, #15
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	4618      	mov	r0, r3
 8000810:	495a      	ldr	r1, [pc, #360]	; (800097c <Update_EXTI+0x1bc>)
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	4002      	ands	r2, r0
 8000816:	3302      	adds	r3, #2
 8000818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_position );
 800081c:	4a57      	ldr	r2, [pc, #348]	; (800097c <Update_EXTI+0x1bc>)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	3302      	adds	r3, #2
 8000822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4955      	ldr	r1, [pc, #340]	; (8000980 <Update_EXTI+0x1c0>)
 800082c:	428b      	cmp	r3, r1
 800082e:	d016      	beq.n	800085e <Update_EXTI+0x9e>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	4953      	ldr	r1, [pc, #332]	; (8000984 <Update_EXTI+0x1c4>)
 8000836:	428b      	cmp	r3, r1
 8000838:	d00f      	beq.n	800085a <Update_EXTI+0x9a>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	4952      	ldr	r1, [pc, #328]	; (8000988 <Update_EXTI+0x1c8>)
 8000840:	428b      	cmp	r3, r1
 8000842:	d008      	beq.n	8000856 <Update_EXTI+0x96>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4950      	ldr	r1, [pc, #320]	; (800098c <Update_EXTI+0x1cc>)
 800084a:	428b      	cmp	r3, r1
 800084c:	d101      	bne.n	8000852 <Update_EXTI+0x92>
 800084e:	2303      	movs	r3, #3
 8000850:	e006      	b.n	8000860 <Update_EXTI+0xa0>
 8000852:	2300      	movs	r3, #0
 8000854:	e004      	b.n	8000860 <Update_EXTI+0xa0>
 8000856:	2302      	movs	r3, #2
 8000858:	e002      	b.n	8000860 <Update_EXTI+0xa0>
 800085a:	2301      	movs	r3, #1
 800085c:	e000      	b.n	8000860 <Update_EXTI+0xa0>
 800085e:	2300      	movs	r3, #0
 8000860:	7bb9      	ldrb	r1, [r7, #14]
 8000862:	408b      	lsls	r3, r1
 8000864:	4618      	mov	r0, r3
 8000866:	4945      	ldr	r1, [pc, #276]	; (800097c <Update_EXTI+0x1bc>)
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	4302      	orrs	r2, r0
 800086c:	3302      	adds	r3, #2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

//=================================================================
//3- update Rising and Falling edge
//clear the corresponding bit
EXTI->RTSR &= ~ (1<< EXTI_Config->EXTI_PIN.EXT_InputLineNumber) ;
 8000872:	4b47      	ldr	r3, [pc, #284]	; (8000990 <Update_EXTI+0x1d0>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	8812      	ldrh	r2, [r2, #0]
 800087a:	4611      	mov	r1, r2
 800087c:	2201      	movs	r2, #1
 800087e:	408a      	lsls	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	4611      	mov	r1, r2
 8000884:	4a42      	ldr	r2, [pc, #264]	; (8000990 <Update_EXTI+0x1d0>)
 8000886:	400b      	ands	r3, r1
 8000888:	6093      	str	r3, [r2, #8]
EXTI->FTSR &= ~ (1<< EXTI_Config->EXTI_PIN.EXT_InputLineNumber) ;
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <Update_EXTI+0x1d0>)
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	8812      	ldrh	r2, [r2, #0]
 8000892:	4611      	mov	r1, r2
 8000894:	2201      	movs	r2, #1
 8000896:	408a      	lsls	r2, r1
 8000898:	43d2      	mvns	r2, r2
 800089a:	4611      	mov	r1, r2
 800089c:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <Update_EXTI+0x1d0>)
 800089e:	400b      	ands	r3, r1
 80008a0:	60d3      	str	r3, [r2, #12]

if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7b1b      	ldrb	r3, [r3, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10b      	bne.n	80008c2 <Update_EXTI+0x102>
{
	EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXT_InputLineNumber) ;
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <Update_EXTI+0x1d0>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	8812      	ldrh	r2, [r2, #0]
 80008b2:	4611      	mov	r1, r2
 80008b4:	2201      	movs	r2, #1
 80008b6:	408a      	lsls	r2, r1
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <Update_EXTI+0x1d0>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6093      	str	r3, [r2, #8]
 80008c0:	e029      	b.n	8000916 <Update_EXTI+0x156>

}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7b1b      	ldrb	r3, [r3, #12]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d10b      	bne.n	80008e2 <Update_EXTI+0x122>
{
	EXTI->FTSR |=  (1<< EXTI_Config->EXTI_PIN.EXT_InputLineNumber) ;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <Update_EXTI+0x1d0>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	8812      	ldrh	r2, [r2, #0]
 80008d2:	4611      	mov	r1, r2
 80008d4:	2201      	movs	r2, #1
 80008d6:	408a      	lsls	r2, r1
 80008d8:	4611      	mov	r1, r2
 80008da:	4a2d      	ldr	r2, [pc, #180]	; (8000990 <Update_EXTI+0x1d0>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	60d3      	str	r3, [r2, #12]
 80008e0:	e019      	b.n	8000916 <Update_EXTI+0x156>
}
else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7b1b      	ldrb	r3, [r3, #12]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d115      	bne.n	8000916 <Update_EXTI+0x156>
{
	EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.EXT_InputLineNumber) ;
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <Update_EXTI+0x1d0>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	8812      	ldrh	r2, [r2, #0]
 80008f2:	4611      	mov	r1, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	408a      	lsls	r2, r1
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a25      	ldr	r2, [pc, #148]	; (8000990 <Update_EXTI+0x1d0>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1<< EXTI_Config->EXTI_PIN.EXT_InputLineNumber) ;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <Update_EXTI+0x1d0>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	8812      	ldrh	r2, [r2, #0]
 8000908:	4611      	mov	r1, r2
 800090a:	2201      	movs	r2, #1
 800090c:	408a      	lsls	r2, r1
 800090e:	4611      	mov	r1, r2
 8000910:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <Update_EXTI+0x1d0>)
 8000912:	430b      	orrs	r3, r1
 8000914:	60d3      	str	r3, [r2, #12]
}
//==========================================================================
//4-update IRQ Handling Callback
GP_IRQ_Callback[EXTI_Config->EXTI_PIN.EXT_InputLineNumber] = EXTI_Config->P_IRQ_Callback ;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <Update_EXTI+0x1d4>)
 8000922:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


//=======================================================================
//5-Enable/Disable IRQ EXTI &NVIC
   if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7b5b      	ldrb	r3, [r3, #13]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d110      	bne.n	8000950 <Update_EXTI+0x190>
   {
	   EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXT_InputLineNumber);
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <Update_EXTI+0x1d0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	4611      	mov	r1, r2
 8000938:	2201      	movs	r2, #1
 800093a:	408a      	lsls	r2, r1
 800093c:	4611      	mov	r1, r2
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <Update_EXTI+0x1d0>)
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
	   Enable_NVIC(EXTI_Config->EXTI_PIN.EXT_InputLineNumber);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe6d 	bl	8000628 <Enable_NVIC>
   {
	   EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXT_InputLineNumber);
	   Disable_NVIC(EXTI_Config->EXTI_PIN.EXT_InputLineNumber);
   }

}
 800094e:	e010      	b.n	8000972 <Update_EXTI+0x1b2>
	   EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXT_InputLineNumber);
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <Update_EXTI+0x1d0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	8812      	ldrh	r2, [r2, #0]
 8000958:	4611      	mov	r1, r2
 800095a:	2201      	movs	r2, #1
 800095c:	408a      	lsls	r2, r1
 800095e:	43d2      	mvns	r2, r2
 8000960:	4611      	mov	r1, r2
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <Update_EXTI+0x1d0>)
 8000964:	400b      	ands	r3, r1
 8000966:	6013      	str	r3, [r2, #0]
	   Disable_NVIC(EXTI_Config->EXTI_PIN.EXT_InputLineNumber);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fec1 	bl	80006f4 <Disable_NVIC>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010000 	.word	0x40010000
 8000980:	40010800 	.word	0x40010800
 8000984:	40010c00 	.word	0x40010c00
 8000988:	40011000 	.word	0x40011000
 800098c:	40011400 	.word	0x40011400
 8000990:	40010400 	.word	0x40010400
 8000994:	20000050 	.word	0x20000050

08000998 <MCAL_EXTI_GPIO_INIT>:
 */



void MCAL_EXTI_GPIO_INIT(EXTI_Pinconfig_t* EXTI_Config)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
   Update_EXTI(EXTI_Config);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff0d 	bl	80007c0 <Update_EXTI>


}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
//Clear pending register by writing 1
	EXTI->PR |= 1<< 0 ;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <EXTI0_IRQHandler+0x1c>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <EXTI0_IRQHandler+0x1c>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6153      	str	r3, [r2, #20]
	//Call IRQ Callback
	GP_IRQ_Callback[0]();
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <EXTI0_IRQHandler+0x20>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4798      	blx	r3
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010400 	.word	0x40010400
 80009d0:	20000050 	.word	0x20000050

080009d4 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 1 ;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <EXTI1_IRQHandler+0x1c>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <EXTI1_IRQHandler+0x1c>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[1]();
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <EXTI1_IRQHandler+0x20>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	4798      	blx	r3
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010400 	.word	0x40010400
 80009f4:	20000050 	.word	0x20000050

080009f8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 2 ;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI2_IRQHandler+0x1c>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EXTI2_IRQHandler+0x1c>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[2]();
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <EXTI2_IRQHandler+0x20>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	4798      	blx	r3
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010400 	.word	0x40010400
 8000a18:	20000050 	.word	0x20000050

08000a1c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 3 ;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI3_IRQHandler+0x1c>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <EXTI3_IRQHandler+0x1c>)
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[3]();
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <EXTI3_IRQHandler+0x20>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	4798      	blx	r3
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010400 	.word	0x40010400
 8000a3c:	20000050 	.word	0x20000050

08000a40 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	//Clear pending register by writing 1
		EXTI->PR |= 1<< 4 ;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <EXTI4_IRQHandler+0x1c>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <EXTI4_IRQHandler+0x1c>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6153      	str	r3, [r2, #20]
		//Call IRQ Callback
		GP_IRQ_Callback[4]();
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <EXTI4_IRQHandler+0x20>)
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	4798      	blx	r3
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010400 	.word	0x40010400
 8000a60:	20000050 	.word	0x20000050

08000a64 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  if(EXTI->PR & 1<<5) { EXTI->PR |= 1<< 5 ; GP_IRQ_Callback[5](); }
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <EXTI9_5_IRQHandler+0x22>
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000a7a:	f043 0320 	orr.w	r3, r3, #32
 8000a7e:	6153      	str	r3, [r2, #20]
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <EXTI9_5_IRQHandler+0xa4>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4798      	blx	r3
  if(EXTI->PR & 1<<6) { EXTI->PR |= 1<< 6 ; GP_IRQ_Callback[6](); }
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <EXTI9_5_IRQHandler+0x40>
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <EXTI9_5_IRQHandler+0xa4>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4798      	blx	r3
  if(EXTI->PR & 1<<7) { EXTI->PR |= 1<< 7 ; GP_IRQ_Callback[7](); }
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <EXTI9_5_IRQHandler+0x5e>
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aba:	6153      	str	r3, [r2, #20]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <EXTI9_5_IRQHandler+0xa4>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	4798      	blx	r3
  if(EXTI->PR & 1<<8) { EXTI->PR |= 1<< 8 ; GP_IRQ_Callback[8](); }
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <EXTI9_5_IRQHandler+0x7c>
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <EXTI9_5_IRQHandler+0xa4>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4798      	blx	r3
  if(EXTI->PR & 1<<9) { EXTI->PR |= 1<< 9 ; GP_IRQ_Callback[9](); }
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <EXTI9_5_IRQHandler+0x9a>
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <EXTI9_5_IRQHandler+0xa0>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6153      	str	r3, [r2, #20]
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <EXTI9_5_IRQHandler+0xa4>)
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	4798      	blx	r3
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40010400 	.word	0x40010400
 8000b08:	20000050 	.word	0x20000050

08000b0c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	  if(EXTI->PR & 1<<10) { EXTI->PR |= 1<< 10 ; GP_IRQ_Callback[10](); }
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d008      	beq.n	8000b2e <EXTI15_10_IRQHandler+0x22>
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6153      	str	r3, [r2, #20]
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <EXTI15_10_IRQHandler+0xc0>)
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	4798      	blx	r3
	  if(EXTI->PR & 1<<11) { EXTI->PR |= 1<< 11 ; GP_IRQ_Callback[11](); }
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d008      	beq.n	8000b4c <EXTI15_10_IRQHandler+0x40>
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <EXTI15_10_IRQHandler+0xc0>)
 8000b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4a:	4798      	blx	r3
	  if(EXTI->PR & 1<<12) { EXTI->PR |= 1<< 12 ; GP_IRQ_Callback[12](); }
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <EXTI15_10_IRQHandler+0x5e>
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b62:	6153      	str	r3, [r2, #20]
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <EXTI15_10_IRQHandler+0xc0>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4798      	blx	r3
	  if(EXTI->PR & 1<<13) { EXTI->PR |= 1<< 13 ; GP_IRQ_Callback[13](); }
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d008      	beq.n	8000b88 <EXTI15_10_IRQHandler+0x7c>
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <EXTI15_10_IRQHandler+0xc0>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	4798      	blx	r3
	  if(EXTI->PR & 1<<14) { EXTI->PR |= 1<< 12 ; GP_IRQ_Callback[14](); }
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d008      	beq.n	8000ba6 <EXTI15_10_IRQHandler+0x9a>
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9e:	6153      	str	r3, [r2, #20]
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <EXTI15_10_IRQHandler+0xc0>)
 8000ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba4:	4798      	blx	r3
	  if(EXTI->PR & 1<<15) { EXTI->PR |= 1<< 13 ; GP_IRQ_Callback[15](); }
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d008      	beq.n	8000bc4 <EXTI15_10_IRQHandler+0xb8>
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <EXTI15_10_IRQHandler+0xbc>)
 8000bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <EXTI15_10_IRQHandler+0xc0>)
 8000bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc2:	4798      	blx	r3
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010400 	.word	0x40010400
 8000bcc:	20000050 	.word	0x20000050

08000bd0 <SPI1_IRQHandler>:
 *                                        IRQ
 * ====================================================================================================
 */

void SPI1_IRQHandler (void)  /* SPI1 global interrupt*/
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <SPI1_IRQHandler+0x54>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	793b      	ldrb	r3, [r7, #4]
 8000be4:	f362 0300 	bfi	r3, r2, #0, #1
 8000be8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <SPI1_IRQHandler+0x54>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	f362 0341 	bfi	r3, r2, #1, #1
 8000bfa:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI1->SR & (1<<4)) >> 4);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <SPI1_IRQHandler+0x54>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	091b      	lsrs	r3, r3, #4
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	793b      	ldrb	r3, [r7, #4]
 8000c0a:	f362 0382 	bfi	r3, r2, #2, #1
 8000c0e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack (irq_src);
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SPI1_IRQHandler+0x58>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	7938      	ldrb	r0, [r7, #4]
 8000c18:	4798      	blx	r3

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40013000 	.word	0x40013000
 8000c28:	20000024 	.word	0x20000024

08000c2c <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <SPI2_IRQHandler+0x54>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	f362 0300 	bfi	r3, r2, #0, #1
 8000c44:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <SPI2_IRQHandler+0x54>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	f362 0341 	bfi	r3, r2, #1, #1
 8000c56:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI2->SR & (1<<4)) >> 4);
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <SPI2_IRQHandler+0x54>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	793b      	ldrb	r3, [r7, #4]
 8000c66:	f362 0382 	bfi	r3, r2, #2, #1
 8000c6a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack (irq_src);
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SPI2_IRQHandler+0x58>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	7938      	ldrb	r0, [r7, #4]
 8000c74:	4798      	blx	r3
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40003800 	.word	0x40003800
 8000c84:	20000024 	.word	0x20000024

08000c88 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <USART1_IRQHandler+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	4798      	blx	r3
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000002c 	.word	0x2000002c

08000c9c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <USART2_IRQHandler+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	4798      	blx	r3
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000002c 	.word	0x2000002c

08000cb0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <USART3_IRQHandler+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	4798      	blx	r3
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000002c 	.word	0x2000002c

08000cc4 <Get_CRLH_Position>:


#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	2b80      	cmp	r3, #128	; 0x80
 8000cd2:	d042      	beq.n	8000d5a <Get_CRLH_Position+0x96>
 8000cd4:	2b80      	cmp	r3, #128	; 0x80
 8000cd6:	dc11      	bgt.n	8000cfc <Get_CRLH_Position+0x38>
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d036      	beq.n	8000d4a <Get_CRLH_Position+0x86>
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	dc06      	bgt.n	8000cee <Get_CRLH_Position+0x2a>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d02e      	beq.n	8000d42 <Get_CRLH_Position+0x7e>
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d02e      	beq.n	8000d46 <Get_CRLH_Position+0x82>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d028      	beq.n	8000d3e <Get_CRLH_Position+0x7a>
 8000cec:	e047      	b.n	8000d7e <Get_CRLH_Position+0xba>
 8000cee:	2b20      	cmp	r3, #32
 8000cf0:	d02f      	beq.n	8000d52 <Get_CRLH_Position+0x8e>
 8000cf2:	2b40      	cmp	r3, #64	; 0x40
 8000cf4:	d02f      	beq.n	8000d56 <Get_CRLH_Position+0x92>
 8000cf6:	2b10      	cmp	r3, #16
 8000cf8:	d029      	beq.n	8000d4e <Get_CRLH_Position+0x8a>
 8000cfa:	e040      	b.n	8000d7e <Get_CRLH_Position+0xba>
 8000cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d00:	d033      	beq.n	8000d6a <Get_CRLH_Position+0xa6>
 8000d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d06:	dc09      	bgt.n	8000d1c <Get_CRLH_Position+0x58>
 8000d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d0c:	d029      	beq.n	8000d62 <Get_CRLH_Position+0x9e>
 8000d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d12:	d028      	beq.n	8000d66 <Get_CRLH_Position+0xa2>
 8000d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d18:	d021      	beq.n	8000d5e <Get_CRLH_Position+0x9a>
 8000d1a:	e030      	b.n	8000d7e <Get_CRLH_Position+0xba>
 8000d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d20:	d027      	beq.n	8000d72 <Get_CRLH_Position+0xae>
 8000d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d26:	dc03      	bgt.n	8000d30 <Get_CRLH_Position+0x6c>
 8000d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d2c:	d01f      	beq.n	8000d6e <Get_CRLH_Position+0xaa>
 8000d2e:	e026      	b.n	8000d7e <Get_CRLH_Position+0xba>
 8000d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d34:	d01f      	beq.n	8000d76 <Get_CRLH_Position+0xb2>
 8000d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d3a:	d01e      	beq.n	8000d7a <Get_CRLH_Position+0xb6>
 8000d3c:	e01f      	b.n	8000d7e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e01e      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 8000d42:	2304      	movs	r3, #4
 8000d44:	e01c      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 8000d46:	2308      	movs	r3, #8
 8000d48:	e01a      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	e018      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	e016      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 8000d52:	2314      	movs	r3, #20
 8000d54:	e014      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8000d56:	2318      	movs	r3, #24
 8000d58:	e012      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	e010      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e00e      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8000d62:	2304      	movs	r3, #4
 8000d64:	e00c      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000d66:	2308      	movs	r3, #8
 8000d68:	e00a      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	e008      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	e006      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8000d72:	2314      	movs	r3, #20
 8000d74:	e004      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000d76:	2318      	movs	r3, #24
 8000d78:	e002      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000d7a:	231c      	movs	r3, #28
 8000d7c:	e000      	b.n	8000d80 <Get_CRLH_Position+0xbc>
		break ;
	}
	return 0 ;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <MCAL_GPIO_Init>:
 * Note              -stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 *                     But LQFP48 package has only GPIO A,B,part of C,D exported as external pins from thw MCU
 */

void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* Pinconfig)
{
 8000d8a:	b590      	push	{r4, r7, lr}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* configregister = NULL ;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	configregister = (Pinconfig ->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	2bff      	cmp	r3, #255	; 0xff
 8000da2:	d801      	bhi.n	8000da8 <MCAL_GPIO_Init+0x1e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	e001      	b.n	8000dac <MCAL_GPIO_Init+0x22>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3304      	adds	r3, #4
 8000dac:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(Pinconfig->GPIO_PinNumber)) ;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff86 	bl	8000cc4 <Get_CRLH_Position>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	43da      	mvns	r2, r3
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	601a      	str	r2, [r3, #0]

	//if pin is output
	if ( (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_AF_PP) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_OD) || (Pinconfig->GPIO_Mode == GPIO_Mode_OUTPUT_PP) )
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d00b      	beq.n	8000dec <MCAL_GPIO_Init+0x62>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	2b06      	cmp	r3, #6
 8000dda:	d007      	beq.n	8000dec <MCAL_GPIO_Init+0x62>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d003      	beq.n	8000dec <MCAL_GPIO_Init+0x62>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d10e      	bne.n	8000e0a <MCAL_GPIO_Init+0x80>
	{
		pin_config =  ((((Pinconfig->GPIO_Mode -4) << 2) | Pinconfig->GPIO_output_speed) & 0x0f );
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	3b04      	subs	r3, #4
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	78db      	ldrb	r3, [r3, #3]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e031      	b.n	8000e6e <MCAL_GPIO_Init+0xe4>
	//if pin is input
	else
	{
		// MODE = 00: Input mode (reset state)

		if ( (Pinconfig->GPIO_Mode == GPIO_Mode_Analog) || (Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_FLO ))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <MCAL_GPIO_Init+0x90>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	789b      	ldrb	r3, [r3, #2]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d107      	bne.n	8000e2a <MCAL_GPIO_Init+0xa0>
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e021      	b.n	8000e6e <MCAL_GPIO_Init+0xe4>

		}
		else if (Pinconfig->GPIO_Mode == GPIO_Mode_AF_INPUT) //consider it as input floating
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d102      	bne.n	8000e38 <MCAL_GPIO_Init+0xae>
		{
			pin_config =  ((((GPIO_Mode_INPUT_FLO) << 2) | 0x0) & 0x0f );
 8000e32:	2304      	movs	r3, #4
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e01a      	b.n	8000e6e <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD Input
		{
			pin_config =  ((((Pinconfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	789b      	ldrb	r3, [r3, #2]
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	73fb      	strb	r3, [r7, #15]
			if(Pinconfig->GPIO_Mode == GPIO_Mode_INPUT_PU)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d107      	bne.n	8000e5e <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= Pinconfig->GPIO_PinNumber ;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	8812      	ldrh	r2, [r2, #0]
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	e007      	b.n	8000e6e <MCAL_GPIO_Init+0xe4>
			}
			else //PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~ (Pinconfig->GPIO_PinNumber) ;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	8812      	ldrh	r2, [r2, #0]
 8000e66:	43d2      	mvns	r2, r2
 8000e68:	401a      	ands	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60da      	str	r2, [r3, #12]
		}

	}
	//write on CRL OR CRH

	(*configregister) |= ( (pin_config) << Get_CRLH_Position(Pinconfig->GPIO_PinNumber) );
 8000e6e:	7bfc      	ldrb	r4, [r7, #15]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff25 	bl	8000cc4 <Get_CRLH_Position>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	fa04 f203 	lsl.w	r2, r4, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	601a      	str	r2, [r3, #0]

}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}

08000e92 <MCAL_GPIO_WritePin>:
 * @retval           -none
 * Note              -none
 */

void MCAL_GPIO_WritePin (GPIO_TypeDef * GPIOx , uint16_t PinNumber , uint8_t value)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	807b      	strh	r3, [r7, #2]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	707b      	strb	r3, [r7, #1]

	if (value != (uint32_t)GPIO_PIN_RESET )
 8000ea2:	787b      	ldrb	r3, [r7, #1]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <MCAL_GPIO_WritePin+0x1e>
		//or
		//		BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}
}
 8000eae:	e002      	b.n	8000eb6 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	615a      	str	r2, [r3, #20]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <MCAL_GPIO_WritePORT>:
 * @param[in]        -Value : Port value
 * @retval           -none
 * Note              -none
 */
void MCAL_GPIO_WritePORT (GPIO_TypeDef * GPIOx , uint16_t value)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value ;
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60da      	str	r2, [r3, #12]

}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <__libc_init_array>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	2500      	movs	r5, #0
 8000ee0:	4e0c      	ldr	r6, [pc, #48]	; (8000f14 <__libc_init_array+0x38>)
 8000ee2:	4c0d      	ldr	r4, [pc, #52]	; (8000f18 <__libc_init_array+0x3c>)
 8000ee4:	1ba4      	subs	r4, r4, r6
 8000ee6:	10a4      	asrs	r4, r4, #2
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	d109      	bne.n	8000f00 <__libc_init_array+0x24>
 8000eec:	f000 f81a 	bl	8000f24 <_init>
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	4e0a      	ldr	r6, [pc, #40]	; (8000f1c <__libc_init_array+0x40>)
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <__libc_init_array+0x44>)
 8000ef6:	1ba4      	subs	r4, r4, r6
 8000ef8:	10a4      	asrs	r4, r4, #2
 8000efa:	42a5      	cmp	r5, r4
 8000efc:	d105      	bne.n	8000f0a <__libc_init_array+0x2e>
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f04:	4798      	blx	r3
 8000f06:	3501      	adds	r5, #1
 8000f08:	e7ee      	b.n	8000ee8 <__libc_init_array+0xc>
 8000f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f0e:	4798      	blx	r3
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7f2      	b.n	8000efa <__libc_init_array+0x1e>
 8000f14:	08000f48 	.word	0x08000f48
 8000f18:	08000f48 	.word	0x08000f48
 8000f1c:	08000f48 	.word	0x08000f48
 8000f20:	08000f4c 	.word	0x08000f4c

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
