
RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fd8  08000fd8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd8  08000fd8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd8  08000fd8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd8  08000fd8  00010fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fdc  08000fdc  00010fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000008  08000fe8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08000fe8  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002522  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000088b  00000000  00000000  00022553  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00022de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00022fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003546  00000000  00000000  00023118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001acf  00000000  00000000  0002665e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000e122  00000000  00000000  0002812d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003624f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000578  00000000  00000000  000362cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f6c 	.word	0x08000f6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000f6c 	.word	0x08000f6c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:

#include "CortexMX_OS_porting.h"


void HardFault_Handler (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:

}
void	MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:

}
void	BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:

}
void	UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:

}

__attribute ((naked))void SVC_Handler() //naked function >>there is no created stack
{
	__asm("tst lr , #4 \n\t" //check bit 2(4=100) in LR (EXC.Return Code)--> 1 MSP stack \ 0 PSP stack
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bb99 	b.w	8000978 <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0 , MSP \n\t"
			"mrsne r0 , PSP \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_init>:


HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	//x count  -> 1 ms
	//x = 8000 count

	//decrease PendSV interrupt priority to be smaller than or equal SYSTICK timer
	//SYSTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn , 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>
}
 8000256:	bf00      	nop
 8000258:	4618      	mov	r0, r3
 800025a:	bd80      	pop	{r7, pc}

0800025c <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:


void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//8MHZ
	//1 count -> 0.125 us
	//x count  -> 1 ms
	//x = 8000 count

	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

void SysTick_Handler()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	MYRTOS_Update_TasksWaitingTime();
 800028c:	f000 fc26 	bl	8000adc <MYRTOS_Update_TasksWaitingTime>
	SYStickLed ^= 1 ;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <SysTick_Handler+0x24>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	f083 0301 	eor.w	r3, r3, #1
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <SysTick_Handler+0x24>)
 800029c:	701a      	strb	r2, [r3, #0]
	//decide whats next
	Decide_whatNext();
 800029e:	f000 fb19 	bl	80008d4 <Decide_whatNext>

	//switch context
	trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <trigger_OS_PendSV>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000034 	.word	0x20000034

080002b0 <FIFO_init>:
 */


#include"My_RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_init+0x3a>

	fifo->base = buff ;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0

}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0


}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <PendSV_Handler+0x1c0>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000402:	4b6c      	ldr	r3, [pc, #432]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	3a04      	subs	r2, #4
 800040c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800040e:	4b69      	ldr	r3, [pc, #420]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800041a:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <PendSV_Handler+0x1c0>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	3a04      	subs	r2, #4
 8000424:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000426:	4b63      	ldr	r3, [pc, #396]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000432:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	3a04      	subs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800043e:	4b5d      	ldr	r3, [pc, #372]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800044a:	4b5a      	ldr	r3, [pc, #360]	; (80005b4 <PendSV_Handler+0x1c0>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	3a04      	subs	r2, #4
 8000454:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000456:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000462:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	3a04      	subs	r2, #4
 800046c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800046e:	4b51      	ldr	r3, [pc, #324]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800047a:	4b4e      	ldr	r3, [pc, #312]	; (80005b4 <PendSV_Handler+0x1c0>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	3a04      	subs	r2, #4
 8000484:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000486:	4b4b      	ldr	r3, [pc, #300]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	3a04      	subs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800049e:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80004aa:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	if (OS_Control.NextTask != NULL){
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <PendSV_Handler+0xec>
		OS_Control.CurrentTask = OS_Control.NextTask ;
 80004cc:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL ;
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	3204      	adds	r2, #4
 80004f6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000506:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	3204      	adds	r2, #4
 800050e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000512:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <PendSV_Handler+0x1c0>)
 800051e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000522:	699a      	ldr	r2, [r3, #24]
 8000524:	3204      	adds	r2, #4
 8000526:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <PendSV_Handler+0x1c0>)
 800052a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000536:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	3204      	adds	r2, #4
 800053e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000542:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <PendSV_Handler+0x1c0>)
 800054e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	3204      	adds	r2, #4
 8000556:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <PendSV_Handler+0x1c0>)
 800055a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000566:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	3204      	adds	r2, #4
 800056e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000572:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <PendSV_Handler+0x1c0>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	3204      	adds	r2, #4
 8000586:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <PendSV_Handler+0x1c0>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	3204      	adds	r2, #4
 800059e:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <PendSV_Handler+0x1c0>)
 80005a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005ae:	4770      	bx	lr

}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	20000038 	.word	0x20000038

080005b8 <MYRTOS_IdleTask>:
//"wfe" wait for event (CPU will be in sleep mode until event occur (excptional or physical interrupt))
//"wfi" wait for interrupt (CPU will be in sleep mode until event occur ( physical interrupt))
//reduced power  and CPU utilization

void MYRTOS_IdleTask()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLed ^= 1 ;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <MYRTOS_IdleTask+0x18>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <MYRTOS_IdleTask+0x18>)
 80005c8:	701a      	strb	r2, [r3, #0]
		//__asm("NOP"); // high cpu utilization
		__asm("wfe");
 80005ca:	bf20      	wfe
		IdleTaskLed ^= 1 ;
 80005cc:	e7f6      	b.n	80005bc <MYRTOS_IdleTask+0x4>
 80005ce:	bf00      	nop
 80005d0:	20000035 	.word	0x20000035

080005d4 <MYRTOS_Create_MainStack>:




void MYRTOS_Create_MainStack()
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <MYRTOS_Create_MainStack+0x34>)
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005e2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005e6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005ec:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005f6:	3b08      	subs	r3, #8
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005fa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task <&_eheap) Error:excedded the available stack size
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20005000 	.word	0x20005000
 800060c:	20000038 	.word	0x20000038

08000610 <MYRTOS_init>:

MYRTOS_errorID MYRTOS_init()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend ;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MYRTOS_init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN Stack for OS
	MYRTOS_Create_MainStack();
 8000622:	f7ff ffd7 	bl	80005d4 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 8000626:	2264      	movs	r2, #100	; 0x64
 8000628:	4913      	ldr	r1, [pc, #76]	; (8000678 <MYRTOS_init+0x68>)
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <MYRTOS_init+0x6c>)
 800062c:	f7ff fe40 	bl	80002b0 <FIFO_init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <MYRTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3301      	adds	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy (MYRTOS_idleTask.TaskName, "idleTask");
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MYRTOS_init+0x70>)
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MYRTOS_init+0x74>)
 8000640:	ca07      	ldmia	r2, {r0, r1, r2}
 8000642:	c303      	stmia	r3!, {r0, r1}
 8000644:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255 ;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MYRTOS_init+0x78>)
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask ;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MYRTOS_init+0x78>)
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MYRTOS_init+0x7c>)
 8000650:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MYRTOS_init+0x78>)
 8000654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000658:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <MYRTOS_init+0x78>)
 800065c:	f000 f856 	bl	800070c <MYRTOS_CreateTask>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4413      	add	r3, r2
 8000668:	71fb      	strb	r3, [r7, #7]

	return error ;
 800066a:	79fb      	ldrb	r3, [r7, #7]

}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000038 	.word	0x20000038
 8000678:	2000023c 	.word	0x2000023c
 800067c:	200001e4 	.word	0x200001e4
 8000680:	20000214 	.word	0x20000214
 8000684:	08000f84 	.word	0x08000f84
 8000688:	200001f8 	.word	0x200001f8
 800068c:	080005b9 	.word	0x080005b9

08000690 <MyRTOS_Create_TaskStack>:


void MyRTOS_Create_TaskStack(Task_ref* Tref)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	 * ============
	 * r5,r6,r7,r8,r9,r10,r11(Saved/Restore Manually)
	 *
	 */

	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP-- ;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	1f1a      	subs	r2, r3, #4
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b4:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	1f1a      	subs	r2, r3, #4
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	1f1a      	subs	r2, r3, #4
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f06f 0202 	mvn.w	r2, #2
 80006dc:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00b      	b.n	80006fc <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	1f1a      	subs	r2, r3, #4
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	ddf0      	ble.n	80006e4 <MyRTOS_Create_TaskStack+0x54>

	}



}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <MYRTOS_CreateTask>:
MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

	//Create Its OWN PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MYRTOS_CreateTask+0x64>)
 800071a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
	{
		return Task_exceeded_StackSize ;
	}*/

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	3b08      	subs	r3, #8
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MYRTOS_CreateTask+0x64>)
 8000738:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack( Tref);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ffa7 	bl	8000690 <MyRTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MYRTOS_CreateTask+0x64>)
 8000744:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000748:	4909      	ldr	r1, [pc, #36]	; (8000770 <MYRTOS_CreateTask+0x64>)
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MYRTOS_CreateTask+0x64>)
 8000752:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000756:	3301      	adds	r3, #1
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <MYRTOS_CreateTask+0x64>)
 800075a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c


	//update the task state to suspend mode
	Tref->TaskState = Suspend ;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 8000766:	7bfb      	ldrb	r3, [r7, #15]

}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000038 	.word	0x20000038

08000774 <bubbleSort>:

//Handler
void bubbleSort()
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <bubbleSort+0x8c>)
 800077c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000780:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e030      	b.n	80007ea <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	e023      	b.n	80007d6 <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <bubbleSort+0x8c>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000796:	791a      	ldrb	r2, [r3, #4]
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	3301      	adds	r3, #1
 800079c:	4918      	ldr	r1, [pc, #96]	; (8000800 <bubbleSort+0x8c>)
 800079e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d913      	bls.n	80007d0 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <bubbleSort+0x8c>)
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <bubbleSort+0x8c>)
 80007b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007bc:	4910      	ldr	r1, [pc, #64]	; (8000800 <bubbleSort+0x8c>)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	490d      	ldr	r1, [pc, #52]	; (8000800 <bubbleSort+0x8c>)
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	3b01      	subs	r3, #1
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3d4      	bcc.n	800078e <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c9      	bcc.n	8000788 <bubbleSort+0x14>
			}

}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000038 	.word	0x20000038

08000804 <MyRTOS_Update_Schadule_tables>:
//Handler
void MyRTOS_Update_Schadule_tables()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
	Task_ref* temp =NULL ;
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000812:	f7ff ffaf 	bl	8000774 <bubbleSort>
	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /* pointer to pointer */)!=FIFO_EMPTY);
 8000816:	bf00      	nop
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	482b      	ldr	r0, [pc, #172]	; (80008cc <MyRTOS_Update_Schadule_tables+0xc8>)
 800081e:	f7ff fdab 	bl	8000378 <FIFO_dequeue>
 8000822:	4603      	mov	r3, r0
 8000824:	2b02      	cmp	r3, #2
 8000826:	d1f7      	bne.n	8000818 <MyRTOS_Update_Schadule_tables+0x14>

	//3- update ready queue

	while(i< OS_Control.NoOfActiveTasks)
 8000828:	e044      	b.n	80008b4 <MyRTOS_Update_Schadule_tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <MyRTOS_Update_Schadule_tables+0xcc>)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <MyRTOS_Update_Schadule_tables+0xcc>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000846:	2b00      	cmp	r3, #0
 8000848:	d031      	beq.n	80008ae <MyRTOS_Update_Schadule_tables+0xaa>
		{
			//in case we reached to the end of avaliable OSTASKS
			if (PnextTask->TaskState == Suspend)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000850:	2b00      	cmp	r3, #0
 8000852:	d108      	bne.n	8000866 <MyRTOS_Update_Schadule_tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	481d      	ldr	r0, [pc, #116]	; (80008cc <MyRTOS_Update_Schadule_tables+0xc8>)
 8000858:	f7ff fd4c 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2203      	movs	r2, #3
 8000860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 8000864:	e02e      	b.n	80008c4 <MyRTOS_Update_Schadule_tables+0xc0>
			}
			//	if the Ptask priority > nexttask then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	791a      	ldrb	r2, [r3, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	d208      	bcs.n	8000884 <MyRTOS_Update_Schadule_tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <MyRTOS_Update_Schadule_tables+0xc8>)
 8000876:	f7ff fd3d 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2203      	movs	r2, #3
 800087e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 8000882:	e01f      	b.n	80008c4 <MyRTOS_Update_Schadule_tables+0xc0>
			}else if (Ptask->priority == PnextTask->priority)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	791a      	ldrb	r2, [r3, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	d108      	bne.n	80008a2 <MyRTOS_Update_Schadule_tables+0x9e>
			{
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MyRTOS_Update_Schadule_tables+0xc8>)
 8000894:	f7ff fd2e 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2203      	movs	r2, #3
 800089c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008a0:	e005      	b.n	80008ae <MyRTOS_Update_Schadule_tables+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	791a      	ldrb	r2, [r3, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d809      	bhi.n	80008c2 <MyRTOS_Update_Schadule_tables+0xbe>
				break ;
			}
		}


		i++ ;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MyRTOS_Update_Schadule_tables+0xcc>)
 80008b6:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8b4      	bhi.n	800082a <MyRTOS_Update_Schadule_tables+0x26>
	}

}
 80008c0:	e000      	b.n	80008c4 <MyRTOS_Update_Schadule_tables+0xc0>
				break ;
 80008c2:	bf00      	nop
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001e4 	.word	0x200001e4
 80008d0:	20000038 	.word	0x20000038

080008d4 <Decide_whatNext>:

//Handler Mode
void Decide_whatNext()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <Decide_whatNext+0x98>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11a      	bne.n	8000916 <Decide_whatNext+0x42>
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <Decide_whatNext+0x9c>)
 80008e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d013      	beq.n	8000916 <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <Decide_whatNext+0x9c>)
 80008f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <Decide_whatNext+0x9c>)
 80008fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <Decide_whatNext+0x98>)
 8000904:	f7ff fcf6 	bl	80002f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <Decide_whatNext+0x9c>)
 800090a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <Decide_whatNext+0x9c>)
 8000910:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 8000914:	e027      	b.n	8000966 <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 8000916:	4917      	ldr	r1, [pc, #92]	; (8000974 <Decide_whatNext+0xa0>)
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <Decide_whatNext+0x98>)
 800091a:	f7ff fd2d 	bl	8000378 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <Decide_whatNext+0x9c>)
 8000920:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000924:	2201      	movs	r2, #1
 8000926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Decide_whatNext+0x9c>)
 800092c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000930:	791a      	ldrb	r2, [r3, #4]
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <Decide_whatNext+0x9c>)
 8000934:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	d113      	bne.n	8000966 <Decide_whatNext+0x92>
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <Decide_whatNext+0x9c>)
 8000940:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000944:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00c      	beq.n	8000966 <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <Decide_whatNext+0x9c>)
 800094e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <Decide_whatNext+0x98>)
 8000956:	f7ff fccd 	bl	80002f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <Decide_whatNext+0x9c>)
 800095c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000960:	2203      	movs	r2, #3
 8000962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001e4 	.word	0x200001e4
 8000970:	20000038 	.word	0x20000038
 8000974:	200001dc 	.word	0x200001dc

08000978 <OS_SVC>:

//Handler Mode
void OS_SVC(int* Stack_Frame)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return address (PC) and XPSR
	unsigned char SVC_number ;
	SVC_number = *((unsigned char*)(((unsigned char*)Stack_Frame[6])-2)) ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3318      	adds	r3, #24
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b02      	subs	r3, #2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73fb      	strb	r3, [r7, #15]

	switch (SVC_number)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b04      	cmp	r3, #4
 8000990:	d829      	bhi.n	80009e6 <OS_SVC+0x6e>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <OS_SVC+0x20>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009ad 	.word	0x080009ad
 800099c:	080009ad 	.word	0x080009ad
 80009a0:	080009db 	.word	0x080009db
 80009a4:	080009e1 	.word	0x080009e1
 80009a8:	080009e1 	.word	0x080009e1
	{
	case SVC_ActivateTask:
	case SVC_TerminateTask:
		//Update Sch Table, Ready Queue
		MyRTOS_Update_Schadule_tables();
 80009ac:	f7ff ff2a 	bl	8000804 <MyRTOS_Update_Schadule_tables>
		//OS is in Running State
		if (OS_Control.OSmodeID == OsRunning)
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <OS_SVC+0x78>)
 80009b2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d114      	bne.n	80009e4 <OS_SVC+0x6c>
		{
			if (strcmp(OS_Control.CurrentTask->TaskName,"idleTask") != 0)
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <OS_SVC+0x78>)
 80009bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c0:	331c      	adds	r3, #28
 80009c2:	490c      	ldr	r1, [pc, #48]	; (80009f4 <OS_SVC+0x7c>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fbd3 	bl	8000170 <strcmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d009      	beq.n	80009e4 <OS_SVC+0x6c>
			{
				//Decide what Next
				Decide_whatNext();
 80009d0:	f7ff ff80 	bl	80008d4 <Decide_whatNext>

				//trigger OS_pendSV (Switch Context/Restore)
				trigger_OS_PendSV();
 80009d4:	f7ff fc42 	bl	800025c <trigger_OS_PendSV>
			}
		}

		break;
 80009d8:	e004      	b.n	80009e4 <OS_SVC+0x6c>
	case SVC_TaskWaitingTime :
		MyRTOS_Update_Schadule_tables();
 80009da:	f7ff ff13 	bl	8000804 <MyRTOS_Update_Schadule_tables>
		break;
 80009de:	e002      	b.n	80009e6 <OS_SVC+0x6e>

	case SVC_AquireMUTEX:

		break;
 80009e0:	bf00      	nop
 80009e2:	e000      	b.n	80009e6 <OS_SVC+0x6e>
		break;
 80009e4:	bf00      	nop
		break;

	}


}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000038 	.word	0x20000038
 80009f4:	08000f84 	.word	0x08000f84

080009f8 <MYRTOS_OS_SVC_Set>:

//Thread Mode
MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d817      	bhi.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <MYRTOS_OS_SVC_Set+0x18>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a29 	.word	0x08000a29
 8000a18:	08000a2d 	.word	0x08000a2d
 8000a1c:	08000a31 	.word	0x08000a31
 8000a20:	08000a35 	.word	0x08000a35
	{
	case SVC_ActivateTask:
		__asm("svc #0x00");
 8000a24:	df00      	svc	0
		break;
 8000a26:	e007      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_TerminateTask:
		__asm("svc #0x01");
 8000a28:	df01      	svc	1
		break;
 8000a2a:	e005      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
 8000a2c:	df02      	svc	2
		break;
 8000a2e:	e003      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_AquireMUTEX:
		__asm("svc #0x03");
 8000a30:	df03      	svc	3
		break;
 8000a32:	e001      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_ReleaseMUTEX:
		__asm("svc #0x04");
 8000a34:	df04      	svc	4
				break;
 8000a36:	bf00      	nop
	}
}
 8000a38:	bf00      	nop
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask (Task_ref* Tref)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting ;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2202      	movs	r2, #2
 8000a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffcf 	bl	80009f8 <MYRTOS_OS_SVC_Set>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <MYRTOS_TerminateTask>:
void MYRTOS_TerminateTask (Task_ref* Tref)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspend ;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffc0 	bl	80009f8 <MYRTOS_OS_SVC_Set>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <MYRTOS_STARTOS>:
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
}


void MYRTOS_STARTOS()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OsRunning ;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MYRTOS_STARTOS+0x54>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask ;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MYRTOS_STARTOS+0x54>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MYRTOS_STARTOS+0x58>)
 8000a90:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a94:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <MYRTOS_STARTOS+0x58>)
 8000a96:	f7ff ffd5 	bl	8000a44 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000a9a:	f7ff fbed 	bl	8000278 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MYRTOS_STARTOS+0x54>)
 8000aa0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000aac:	f3ef 8014 	mrs	r0, CONTROL
 8000ab0:	f04f 0102 	mov.w	r1, #2
 8000ab4:	ea40 0001 	orr.w	r0, r0, r1
 8000ab8:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_UNPrivilageMode;
 8000abc:	f3ef 8314 	mrs	r3, CONTROL
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <MYRTOS_STARTOS+0x58>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4798      	blx	r3
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000038 	.word	0x20000038
 8000ad8:	200001f8 	.word	0x200001f8

08000adc <MYRTOS_Update_TasksWaitingTime>:

void MYRTOS_Update_TasksWaitingTime()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	for(int i=0 ; i<OS_Control.NoOfActiveTasks ; i++ )
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	e031      	b.n	8000b4c <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if(OS_Control.OSTasks[i]->TaskState == Suspend)
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d126      	bne.n	8000b46 <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if(OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable )
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d11e      	bne.n	8000b46 <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count -- ;
 8000b08:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b12:	3a01      	subs	r2, #1
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 0)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d110      	bne.n	8000b46 <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState = Waiting ;
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff ff59 	bl	80009f8 <MYRTOS_OS_SVC_Set>
	for(int i=0 ; i<OS_Control.NoOfActiveTasks ; i++ )
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b4e:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8c7      	bhi.n	8000ae8 <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000038 	.word	0x20000038

08000b64 <MYRTOS_AcquireMutex>:



MYRTOS_errorID MYRTOS_AcquireMutex(Mutex_ref* Mref , Task_ref* Tref)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	if(Mref->CurrentTUser == NULL) // not taken
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <MYRTOS_AcquireMutex+0x1a>
	{
		Mref->CurrentTUser =Tref;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e010      	b.n	8000ba0 <MYRTOS_AcquireMutex+0x3c>
	}
	else
	{
		if(Mref->NextTUser == NULL) // not pending request
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10a      	bne.n	8000b9c <MYRTOS_AcquireMutex+0x38>
		{
			Mref->NextTUser =Tref;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	60da      	str	r2, [r3, #12]
			Tref->TaskState = Suspend ;//wait for the Mutex
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff ff2f 	bl	80009f8 <MYRTOS_OS_SVC_Set>
 8000b9a:	e001      	b.n	8000ba0 <MYRTOS_AcquireMutex+0x3c>

		}
		else //pending request by another task
		{
			return MutexReachedMAXNumberOFUsers;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <MYRTOS_AcquireMutex+0x3e>
		}

	}
return NoError;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <MYRTOS_ReleaseMutex>:
void MYRTOS_ReleaseMutex(Mutex_ref* Mref)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	if(Mref->CurrentTUser != NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00e      	beq.n	8000bd8 <MYRTOS_ReleaseMutex+0x2e>
	{
		Mref->CurrentTUser = Mref->NextTUser ;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
		Mref->NextTUser = NULL;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
		Mref->CurrentTUser->TaskState = Waiting ;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2202      	movs	r2, #2
 8000bce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff ff10 	bl	80009f8 <MYRTOS_OS_SVC_Set>
	}

}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <task1>:
unsigned char task1Led , task2Led ,task3Led,task4Led;
Mutex_ref MUTEX1 ,MUTEX2 ;
unsigned char Payload[3]= {1,2,3};
unsigned char Payload2[3]= {1,2,3};
void task1()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	static int count = 0 ;
	while(1)
	{
		task1Led ^= 1 ;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <task1+0x50>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	f083 0301 	eor.w	r3, r3, #1
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <task1+0x50>)
 8000bf0:	701a      	strb	r2, [r3, #0]
		count ++;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <task1+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <task1+0x54>)
 8000bfa:	6013      	str	r3, [r2, #0]
		if (count == 100)
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <task1+0x54>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b64      	cmp	r3, #100	; 0x64
 8000c02:	d10a      	bne.n	8000c1a <task1+0x3a>
		{
			MYRTOS_AcquireMutex(&MUTEX1, &Task1);
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <task1+0x58>)
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <task1+0x5c>)
 8000c08:	f7ff ffac 	bl	8000b64 <MYRTOS_AcquireMutex>
			MYRTOS_ActivateTask(&Task4);
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <task1+0x60>)
 8000c0e:	f7ff ff19 	bl	8000a44 <MYRTOS_ActivateTask>
			MYRTOS_AcquireMutex(&MUTEX2, &Task1);
 8000c12:	4909      	ldr	r1, [pc, #36]	; (8000c38 <task1+0x58>)
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <task1+0x64>)
 8000c16:	f7ff ffa5 	bl	8000b64 <MYRTOS_AcquireMutex>

		}
		if (count == 200)
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <task1+0x54>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2bc8      	cmp	r3, #200	; 0xc8
 8000c20:	d1e0      	bne.n	8000be4 <task1+0x4>
		{
			count = 0 ;
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <task1+0x54>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&MUTEX1);
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <task1+0x5c>)
 8000c2a:	f7ff ffbe 	bl	8000baa <MYRTOS_ReleaseMutex>
		task1Led ^= 1 ;
 8000c2e:	e7d9      	b.n	8000be4 <task1+0x4>
 8000c30:	20000488 	.word	0x20000488
 8000c34:	20000024 	.word	0x20000024
 8000c38:	20000444 	.word	0x20000444
 8000c3c:	20000414 	.word	0x20000414
 8000c40:	200003cc 	.word	0x200003cc
 8000c44:	2000048c 	.word	0x2000048c

08000c48 <task2>:
		}
	}
}

void task2()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

	static int count = 0 ;
	while(1)
	{
		task2Led ^= 1 ;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <task2+0x40>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f083 0301 	eor.w	r3, r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <task2+0x40>)
 8000c58:	701a      	strb	r2, [r3, #0]
		count ++;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <task2+0x44>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <task2+0x44>)
 8000c62:	6013      	str	r3, [r2, #0]
		if (count == 100)
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <task2+0x44>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b64      	cmp	r3, #100	; 0x64
 8000c6a:	d102      	bne.n	8000c72 <task2+0x2a>
		{
			MYRTOS_ActivateTask(&Task3);
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <task2+0x48>)
 8000c6e:	f7ff fee9 	bl	8000a44 <MYRTOS_ActivateTask>

		}
		if (count == 200)
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <task2+0x44>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2bc8      	cmp	r3, #200	; 0xc8
 8000c78:	d1e8      	bne.n	8000c4c <task2+0x4>
		{
			count = 0 ;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <task2+0x44>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task2);
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <task2+0x4c>)
 8000c82:	f7ff feee 	bl	8000a62 <MYRTOS_TerminateTask>
		task2Led ^= 1 ;
 8000c86:	e7e1      	b.n	8000c4c <task2+0x4>
 8000c88:	200004bc 	.word	0x200004bc
 8000c8c:	20000028 	.word	0x20000028
 8000c90:	200004c0 	.word	0x200004c0
 8000c94:	20000508 	.word	0x20000508

08000c98 <task3>:
		}
	}
}

void task3()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

	static int count = 0 ;
	while(1)
	{
		task3Led ^= 1 ;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <task3+0x40>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f083 0301 	eor.w	r3, r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <task3+0x40>)
 8000ca8:	701a      	strb	r2, [r3, #0]
		count ++;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <task3+0x44>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <task3+0x44>)
 8000cb2:	6013      	str	r3, [r2, #0]
		if (count == 100)
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <task3+0x44>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b64      	cmp	r3, #100	; 0x64
 8000cba:	d102      	bne.n	8000cc2 <task3+0x2a>
		{
			MYRTOS_ActivateTask(&Task4);
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <task3+0x48>)
 8000cbe:	f7ff fec1 	bl	8000a44 <MYRTOS_ActivateTask>
		}
		if (count == 200)
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <task3+0x44>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2bc8      	cmp	r3, #200	; 0xc8
 8000cc8:	d1e8      	bne.n	8000c9c <task3+0x4>
		{
			count = 0 ;
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <task3+0x44>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task3);
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <task3+0x4c>)
 8000cd2:	f7ff fec6 	bl	8000a62 <MYRTOS_TerminateTask>
		task3Led ^= 1 ;
 8000cd6:	e7e1      	b.n	8000c9c <task3+0x4>
 8000cd8:	20000410 	.word	0x20000410
 8000cdc:	2000002c 	.word	0x2000002c
 8000ce0:	200003cc 	.word	0x200003cc
 8000ce4:	200004c0 	.word	0x200004c0

08000ce8 <task4>:
		}
	}
}
void task4()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

	static int count = 0 ;
	while(1)
	{
		task4Led ^= 1 ;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <task4+0x50>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	f083 0301 	eor.w	r3, r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <task4+0x50>)
 8000cf8:	701a      	strb	r2, [r3, #0]
		count ++;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <task4+0x54>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <task4+0x54>)
 8000d02:	6013      	str	r3, [r2, #0]

		if (count == 3)
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <task4+0x54>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d107      	bne.n	8000d1c <task4+0x34>
		{
			MYRTOS_AcquireMutex(&MUTEX2, &Task4);
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <task4+0x58>)
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <task4+0x5c>)
 8000d10:	f7ff ff28 	bl	8000b64 <MYRTOS_AcquireMutex>
		MYRTOS_AcquireMutex(&MUTEX1, &Task4);
 8000d14:	490a      	ldr	r1, [pc, #40]	; (8000d40 <task4+0x58>)
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <task4+0x60>)
 8000d18:	f7ff ff24 	bl	8000b64 <MYRTOS_AcquireMutex>
		}
		if (count == 200)
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <task4+0x54>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2bc8      	cmp	r3, #200	; 0xc8
 8000d22:	d1e3      	bne.n	8000cec <task4+0x4>
		{
			count = 0 ;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <task4+0x54>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&MUTEX1);
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <task4+0x60>)
 8000d2c:	f7ff ff3d 	bl	8000baa <MYRTOS_ReleaseMutex>
			MYRTOS_TerminateTask(&Task4);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <task4+0x58>)
 8000d32:	f7ff fe96 	bl	8000a62 <MYRTOS_TerminateTask>
		task4Led ^= 1 ;
 8000d36:	e7d9      	b.n	8000cec <task4+0x4>
 8000d38:	20000504 	.word	0x20000504
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	200003cc 	.word	0x200003cc
 8000d44:	2000048c 	.word	0x2000048c
 8000d48:	20000414 	.word	0x20000414

08000d4c <main>:
	}


}
int main(void)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	MYRTOS_errorID error;
	HW_init();
 8000d52:	f7ff fa79 	bl	8000248 <HW_init>

	if (MYRTOS_init() != NoError)
 8000d56:	f7ff fc5b 	bl	8000610 <MYRTOS_init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d000      	beq.n	8000d62 <main+0x16>
		while(1);
 8000d60:	e7fe      	b.n	8000d60 <main+0x14>

	MUTEX1.PayloadSize =3;
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <main+0x124>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	605a      	str	r2, [r3, #4]
	MUTEX1.Ppayload = Payload ;
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <main+0x124>)
 8000d6a:	4a42      	ldr	r2, [pc, #264]	; (8000e74 <main+0x128>)
 8000d6c:	601a      	str	r2, [r3, #0]
	strcpy(MUTEX1.MutexName ,"mutex1_shared_T1_T4");
 8000d6e:	4a42      	ldr	r2, [pc, #264]	; (8000e78 <main+0x12c>)
 8000d70:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <main+0x130>)
 8000d72:	4614      	mov	r4, r2
 8000d74:	461d      	mov	r5, r3
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	6023      	str	r3, [r4, #0]

	MUTEX2.PayloadSize =3;
 8000d7e:	4b40      	ldr	r3, [pc, #256]	; (8000e80 <main+0x134>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	605a      	str	r2, [r3, #4]
	MUTEX2.Ppayload = Payload2 ;
 8000d84:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <main+0x134>)
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <main+0x138>)
 8000d88:	601a      	str	r2, [r3, #0]
	strcpy(MUTEX2.MutexName ,"mutex2_shared_T4_T1");
 8000d8a:	4a3f      	ldr	r2, [pc, #252]	; (8000e88 <main+0x13c>)
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <main+0x140>)
 8000d8e:	4614      	mov	r4, r2
 8000d90:	461d      	mov	r5, r3
 8000d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d96:	682b      	ldr	r3, [r5, #0]
 8000d98:	6023      	str	r3, [r4, #0]

	Task1.Stack_Size = 1024 ;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <main+0x144>)
 8000d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da0:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1 ;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <main+0x144>)
 8000da4:	4a3b      	ldr	r2, [pc, #236]	; (8000e94 <main+0x148>)
 8000da6:	609a      	str	r2, [r3, #8]
	Task1.priority = 4 ;
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <main+0x144>)
 8000daa:	2204      	movs	r2, #4
 8000dac:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName , "task1");
 8000dae:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <main+0x14c>)
 8000db0:	4a3a      	ldr	r2, [pc, #232]	; (8000e9c <main+0x150>)
 8000db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db6:	6018      	str	r0, [r3, #0]
 8000db8:	3304      	adds	r3, #4
 8000dba:	8019      	strh	r1, [r3, #0]

	Task2.Stack_Size = 1024 ;
 8000dbc:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <main+0x154>)
 8000dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc2:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2 ;
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <main+0x154>)
 8000dc6:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <main+0x158>)
 8000dc8:	609a      	str	r2, [r3, #8]
	Task2.priority = 3 ;
 8000dca:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <main+0x154>)
 8000dcc:	2203      	movs	r2, #3
 8000dce:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName , "task2");
 8000dd0:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <main+0x15c>)
 8000dd2:	4a36      	ldr	r2, [pc, #216]	; (8000eac <main+0x160>)
 8000dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dd8:	6018      	str	r0, [r3, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	8019      	strh	r1, [r3, #0]

	Task3.Stack_Size = 1024 ;
 8000dde:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <main+0x164>)
 8000de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de4:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3 ;
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <main+0x164>)
 8000de8:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <main+0x168>)
 8000dea:	609a      	str	r2, [r3, #8]
	Task3.priority = 2;
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <main+0x164>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName , "task3");
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <main+0x16c>)
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <main+0x170>)
 8000df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dfa:	6018      	str	r0, [r3, #0]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	8019      	strh	r1, [r3, #0]

	Task4.Stack_Size = 1024 ;
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <main+0x174>)
 8000e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e06:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry = task4 ;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <main+0x174>)
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <main+0x178>)
 8000e0c:	609a      	str	r2, [r3, #8]
	Task4.priority = 1;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <main+0x174>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.TaskName , "task4");
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <main+0x17c>)
 8000e16:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <main+0x180>)
 8000e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	8019      	strh	r1, [r3, #0]

	error += MYRTOS_CreateTask(&Task1) ;
 8000e22:	481b      	ldr	r0, [pc, #108]	; (8000e90 <main+0x144>)
 8000e24:	f7ff fc72 	bl	800070c <MYRTOS_CreateTask>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4413      	add	r3, r2
 8000e30:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2) ;
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <main+0x154>)
 8000e34:	f7ff fc6a 	bl	800070c <MYRTOS_CreateTask>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4413      	add	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3) ;
 8000e42:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <main+0x164>)
 8000e44:	f7ff fc62 	bl	800070c <MYRTOS_CreateTask>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4413      	add	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4) ;
 8000e52:	481b      	ldr	r0, [pc, #108]	; (8000ec0 <main+0x174>)
 8000e54:	f7ff fc5a 	bl	800070c <MYRTOS_CreateTask>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4413      	add	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]

	MYRTOS_ActivateTask(&Task1);
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x144>)
 8000e64:	f7ff fdee 	bl	8000a44 <MYRTOS_ActivateTask>




	MYRTOS_STARTOS();
 8000e68:	f7ff fe0a 	bl	8000a80 <MYRTOS_STARTOS>

	while(1)
 8000e6c:	e7fe      	b.n	8000e6c <main+0x120>
 8000e6e:	bf00      	nop
 8000e70:	20000414 	.word	0x20000414
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000424 	.word	0x20000424
 8000e7c:	08000f90 	.word	0x08000f90
 8000e80:	2000048c 	.word	0x2000048c
 8000e84:	20000004 	.word	0x20000004
 8000e88:	2000049c 	.word	0x2000049c
 8000e8c:	08000fa4 	.word	0x08000fa4
 8000e90:	20000444 	.word	0x20000444
 8000e94:	08000be1 	.word	0x08000be1
 8000e98:	20000460 	.word	0x20000460
 8000e9c:	08000fb8 	.word	0x08000fb8
 8000ea0:	20000508 	.word	0x20000508
 8000ea4:	08000c49 	.word	0x08000c49
 8000ea8:	20000524 	.word	0x20000524
 8000eac:	08000fc0 	.word	0x08000fc0
 8000eb0:	200004c0 	.word	0x200004c0
 8000eb4:	08000c99 	.word	0x08000c99
 8000eb8:	200004dc 	.word	0x200004dc
 8000ebc:	08000fc8 	.word	0x08000fc8
 8000ec0:	200003cc 	.word	0x200003cc
 8000ec4:	08000ce9 	.word	0x08000ce9
 8000ec8:	200003e8 	.word	0x200003e8
 8000ecc:	08000fd0 	.word	0x08000fd0

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ed4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f000 f811 	bl	8000f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f02:	f7ff ff23 	bl	8000d4c <main>

08000f06 <LoopForever>:

LoopForever:
    b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000f14:	08000fe0 	.word	0x08000fe0
  ldr r2, =_sbss
 8000f18:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000f1c:	2000054c 	.word	0x2000054c

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <__libc_init_array>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	2500      	movs	r5, #0
 8000f28:	4e0c      	ldr	r6, [pc, #48]	; (8000f5c <__libc_init_array+0x38>)
 8000f2a:	4c0d      	ldr	r4, [pc, #52]	; (8000f60 <__libc_init_array+0x3c>)
 8000f2c:	1ba4      	subs	r4, r4, r6
 8000f2e:	10a4      	asrs	r4, r4, #2
 8000f30:	42a5      	cmp	r5, r4
 8000f32:	d109      	bne.n	8000f48 <__libc_init_array+0x24>
 8000f34:	f000 f81a 	bl	8000f6c <_init>
 8000f38:	2500      	movs	r5, #0
 8000f3a:	4e0a      	ldr	r6, [pc, #40]	; (8000f64 <__libc_init_array+0x40>)
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <__libc_init_array+0x44>)
 8000f3e:	1ba4      	subs	r4, r4, r6
 8000f40:	10a4      	asrs	r4, r4, #2
 8000f42:	42a5      	cmp	r5, r4
 8000f44:	d105      	bne.n	8000f52 <__libc_init_array+0x2e>
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4c:	4798      	blx	r3
 8000f4e:	3501      	adds	r5, #1
 8000f50:	e7ee      	b.n	8000f30 <__libc_init_array+0xc>
 8000f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f56:	4798      	blx	r3
 8000f58:	3501      	adds	r5, #1
 8000f5a:	e7f2      	b.n	8000f42 <__libc_init_array+0x1e>
 8000f5c:	08000fd8 	.word	0x08000fd8
 8000f60:	08000fd8 	.word	0x08000fd8
 8000f64:	08000fd8 	.word	0x08000fd8
 8000f68:	08000fdc 	.word	0x08000fdc

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
